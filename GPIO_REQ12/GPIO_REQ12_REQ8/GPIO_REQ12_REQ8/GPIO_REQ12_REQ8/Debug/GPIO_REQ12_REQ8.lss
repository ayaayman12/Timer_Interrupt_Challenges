
GPIO_REQ12_REQ8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000668  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a77  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1d  00000000  00000000  000022ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a65  00000000  00000000  00002cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00003730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a13  00000000  00000000  00003a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001023  00000000  00000000  00004437  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000545a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 19 01 	call	0x232	; 0x232 <main>
  74:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <gpioPinDirection>:
	switch(u8_port)
	{
		case GPIOA: PORTA_DATA ^= u8_pins;break;
		case GPIOB: PORTB_DATA ^= u8_pins;break;
		case GPIOC: PORTC_DATA ^= u8_pins;break;
		case GPIOD: PORTD_DATA ^= u8_pins;break;
  7c:	41 11       	cpse	r20, r1
  7e:	1c c0       	rjmp	.+56     	; 0xb8 <gpioPinDirection+0x3c>
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	59 f0       	breq	.+22     	; 0x9a <gpioPinDirection+0x1e>
  84:	28 f0       	brcs	.+10     	; 0x90 <gpioPinDirection+0x14>
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	69 f0       	breq	.+26     	; 0xa4 <gpioPinDirection+0x28>
  8a:	83 30       	cpi	r24, 0x03	; 3
  8c:	81 f0       	breq	.+32     	; 0xae <gpioPinDirection+0x32>
  8e:	08 95       	ret
  90:	8a b3       	in	r24, 0x1a	; 26
  92:	60 95       	com	r22
  94:	68 23       	and	r22, r24
  96:	6a bb       	out	0x1a, r22	; 26
  98:	08 95       	ret
  9a:	87 b3       	in	r24, 0x17	; 23
  9c:	60 95       	com	r22
  9e:	68 23       	and	r22, r24
  a0:	67 bb       	out	0x17, r22	; 23
  a2:	08 95       	ret
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	60 95       	com	r22
  a8:	68 23       	and	r22, r24
  aa:	64 bb       	out	0x14, r22	; 20
  ac:	08 95       	ret
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	60 95       	com	r22
  b2:	68 23       	and	r22, r24
  b4:	61 bb       	out	0x11, r22	; 17
  b6:	08 95       	ret
  b8:	4f 3f       	cpi	r20, 0xFF	; 255
  ba:	b9 f4       	brne	.+46     	; 0xea <gpioPinDirection+0x6e>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	51 f0       	breq	.+20     	; 0xd4 <gpioPinDirection+0x58>
  c0:	28 f0       	brcs	.+10     	; 0xcc <gpioPinDirection+0x50>
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	59 f0       	breq	.+22     	; 0xdc <gpioPinDirection+0x60>
  c6:	83 30       	cpi	r24, 0x03	; 3
  c8:	69 f0       	breq	.+26     	; 0xe4 <gpioPinDirection+0x68>
  ca:	08 95       	ret
  cc:	8a b3       	in	r24, 0x1a	; 26
  ce:	68 2b       	or	r22, r24
  d0:	6a bb       	out	0x1a, r22	; 26
  d2:	08 95       	ret
  d4:	87 b3       	in	r24, 0x17	; 23
  d6:	68 2b       	or	r22, r24
  d8:	67 bb       	out	0x17, r22	; 23
  da:	08 95       	ret
  dc:	84 b3       	in	r24, 0x14	; 20
  de:	68 2b       	or	r22, r24
  e0:	64 bb       	out	0x14, r22	; 20
  e2:	08 95       	ret
  e4:	81 b3       	in	r24, 0x11	; 17
  e6:	68 2b       	or	r22, r24
  e8:	61 bb       	out	0x11, r22	; 17
  ea:	08 95       	ret

000000ec <gpioPinWrite>:
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	71 f0       	breq	.+28     	; 0x10c <gpioPinWrite+0x20>
  f0:	28 f0       	brcs	.+10     	; 0xfc <gpioPinWrite+0x10>
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	99 f0       	breq	.+38     	; 0x11c <gpioPinWrite+0x30>
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	c9 f0       	breq	.+50     	; 0x12c <gpioPinWrite+0x40>
  fa:	08 95       	ret
  fc:	8b b3       	in	r24, 0x1b	; 27
  fe:	96 2f       	mov	r25, r22
 100:	90 95       	com	r25
 102:	89 23       	and	r24, r25
 104:	46 23       	and	r20, r22
 106:	48 2b       	or	r20, r24
 108:	4b bb       	out	0x1b, r20	; 27
 10a:	08 95       	ret
 10c:	88 b3       	in	r24, 0x18	; 24
 10e:	96 2f       	mov	r25, r22
 110:	90 95       	com	r25
 112:	89 23       	and	r24, r25
 114:	46 23       	and	r20, r22
 116:	48 2b       	or	r20, r24
 118:	48 bb       	out	0x18, r20	; 24
 11a:	08 95       	ret
 11c:	85 b3       	in	r24, 0x15	; 21
 11e:	96 2f       	mov	r25, r22
 120:	90 95       	com	r25
 122:	89 23       	and	r24, r25
 124:	46 23       	and	r20, r22
 126:	48 2b       	or	r20, r24
 128:	45 bb       	out	0x15, r20	; 21
 12a:	08 95       	ret
 12c:	82 b3       	in	r24, 0x12	; 18
 12e:	96 2f       	mov	r25, r22
 130:	90 95       	com	r25
 132:	89 23       	and	r24, r25
 134:	46 23       	and	r20, r22
 136:	48 2b       	or	r20, r24
 138:	42 bb       	out	0x12, r20	; 18
 13a:	08 95       	ret

0000013c <gpioPinRead>:
/* When you anding PORTx PIN value withe the required Pin to read it returns either 0 or pin number*/
/* we consider 0 as Low and any other value as High*/
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t u8_pin_value=-1;
	switch(u8_port)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	49 f0       	breq	.+18     	; 0x152 <gpioPinRead+0x16>
 140:	28 f0       	brcs	.+10     	; 0x14c <gpioPinRead+0x10>
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	49 f0       	breq	.+18     	; 0x158 <gpioPinRead+0x1c>
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	51 f0       	breq	.+20     	; 0x15e <gpioPinRead+0x22>
 14a:	0c c0       	rjmp	.+24     	; 0x164 <gpioPinRead+0x28>
	{
		case GPIOA: u8_pin_value = (PORTA_PIN & u8_pin);break;
 14c:	89 b3       	in	r24, 0x19	; 25
 14e:	68 23       	and	r22, r24
 150:	0a c0       	rjmp	.+20     	; 0x166 <gpioPinRead+0x2a>
		case GPIOB: u8_pin_value = (PORTB_PIN & u8_pin);break;
 152:	86 b3       	in	r24, 0x16	; 22
 154:	68 23       	and	r22, r24
 156:	07 c0       	rjmp	.+14     	; 0x166 <gpioPinRead+0x2a>
		case GPIOC: u8_pin_value = (PORTC_PIN & u8_pin);break;
 158:	83 b3       	in	r24, 0x13	; 19
 15a:	68 23       	and	r22, r24
 15c:	04 c0       	rjmp	.+8      	; 0x166 <gpioPinRead+0x2a>
		case GPIOD: u8_pin_value = (PORTD_PIN & u8_pin);break;
 15e:	80 b3       	in	r24, 0x10	; 16
 160:	68 23       	and	r22, r24
 162:	01 c0       	rjmp	.+2      	; 0x166 <gpioPinRead+0x2a>

/* When you anding PORTx PIN value withe the required Pin to read it returns either 0 or pin number*/
/* we consider 0 as Low and any other value as High*/
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t u8_pin_value=-1;
 164:	6f ef       	ldi	r22, 0xFF	; 255
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	61 11       	cpse	r22, r1
 16a:	01 c0       	rjmp	.+2      	; 0x16e <gpioPinRead+0x32>
 16c:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(u8_pin_value == 0)
		return LOW;
	else
		return HIGH;
}
 16e:	81 95       	neg	r24
 170:	08 95       	ret

00000172 <Led_Init>:
#include "gpio.h"
/* This function is used to configure the direction of the led Pins as OUTPUT*/
/* Based on gpioPinDirection function */
void Led_Init(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	61 f0       	breq	.+24     	; 0x18e <Led_Init+0x1c>
 176:	28 f0       	brcs	.+10     	; 0x182 <Led_Init+0x10>
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	79 f0       	breq	.+30     	; 0x19a <Led_Init+0x28>
 17c:	83 30       	cpi	r24, 0x03	; 3
 17e:	99 f0       	breq	.+38     	; 0x1a6 <Led_Init+0x34>
 180:	08 95       	ret
	{
		case LED_0:
		{
			gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
 182:	4f ef       	ldi	r20, 0xFF	; 255
 184:	60 e1       	ldi	r22, 0x10	; 16
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
			break;
 18c:	08 95       	ret
		}
		case LED_1:
		{
			gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
 18e:	4f ef       	ldi	r20, 0xFF	; 255
 190:	60 e2       	ldi	r22, 0x20	; 32
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
			break;
 198:	08 95       	ret
		}
		case LED_2:
		{
			gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
 19a:	4f ef       	ldi	r20, 0xFF	; 255
 19c:	60 e4       	ldi	r22, 0x40	; 64
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
			break;
 1a4:	08 95       	ret
		}
		case LED_3:
		{
			gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
 1a6:	4f ef       	ldi	r20, 0xFF	; 255
 1a8:	60 e8       	ldi	r22, 0x80	; 128
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
 1b0:	08 95       	ret

000001b2 <Led_On>:

/* This function is implemented to choose which led we want to turn on by sending its number*/
/* Based on gpioPinwrite function with HIGH value*/
void Led_On(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	61 f0       	breq	.+24     	; 0x1ce <Led_On+0x1c>
 1b6:	28 f0       	brcs	.+10     	; 0x1c2 <Led_On+0x10>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	79 f0       	breq	.+30     	; 0x1da <Led_On+0x28>
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	99 f0       	breq	.+38     	; 0x1e6 <Led_On+0x34>
 1c0:	08 95       	ret
	{
		case LED_0:
		{
			 gpioPinWrite(LED_0_GPIO,LED_0_BIT, HIGH);
 1c2:	4f ef       	ldi	r20, 0xFF	; 255
 1c4:	60 e1       	ldi	r22, 0x10	; 16
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 1cc:	08 95       	ret
		}
		case LED_1:
		{
			 gpioPinWrite(LED_1_GPIO,LED_1_BIT, HIGH);
 1ce:	4f ef       	ldi	r20, 0xFF	; 255
 1d0:	60 e2       	ldi	r22, 0x20	; 32
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 1d8:	08 95       	ret
		}
		case LED_2:
		{
			 gpioPinWrite(LED_2_GPIO,LED_2_BIT, HIGH);
 1da:	4f ef       	ldi	r20, 0xFF	; 255
 1dc:	60 e4       	ldi	r22, 0x40	; 64
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 1e4:	08 95       	ret
		}
		case LED_3:
		{
			 gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
 1e6:	4f ef       	ldi	r20, 0xFF	; 255
 1e8:	60 e8       	ldi	r22, 0x80	; 128
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
 1f0:	08 95       	ret

000001f2 <Led_Off>:

/* This function is implemented to choose which led we want to turn off by sending its number*/
/* Based on gpioPinwrite function with LAW value*/
void Led_Off(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	61 f0       	breq	.+24     	; 0x20e <Led_Off+0x1c>
 1f6:	28 f0       	brcs	.+10     	; 0x202 <Led_Off+0x10>
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	79 f0       	breq	.+30     	; 0x21a <Led_Off+0x28>
 1fc:	83 30       	cpi	r24, 0x03	; 3
 1fe:	99 f0       	breq	.+38     	; 0x226 <Led_Off+0x34>
 200:	08 95       	ret
	{
		case LED_0:
		{
			gpioPinWrite(LED_0_GPIO,LED_0_BIT, LOW);
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	60 e1       	ldi	r22, 0x10	; 16
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 20c:	08 95       	ret
		}
		case LED_1:
		{
			gpioPinWrite(LED_1_GPIO,LED_1_BIT, LOW);
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	60 e2       	ldi	r22, 0x20	; 32
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 218:	08 95       	ret
		}
		case LED_2:
		{
			gpioPinWrite(LED_2_GPIO,LED_2_BIT, LOW);
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	60 e4       	ldi	r22, 0x40	; 64
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 224:	08 95       	ret
		}
		case LED_3:
		{
			gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	60 e8       	ldi	r22, 0x80	; 128
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
 230:	08 95       	ret

00000232 <main>:


int main(void)
{
	
	Led_Init(LED_0);
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 b9 00 	call	0x172	; 0x172 <Led_Init>
	pushButtonInit(BTN_0);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 56 01 	call	0x2ac	; 0x2ac <pushButtonInit>
	/* Replace with your application code */
	timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_8,6,0,T0_INTERRUPT_NORMAL);
 23e:	ee 24       	eor	r14, r14
 240:	e3 94       	inc	r14
 242:	00 e0       	ldi	r16, 0x00	; 0
 244:	26 e0       	ldi	r18, 0x06	; 6
 246:	42 e0       	ldi	r20, 0x02	; 2
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 91 02 	call	0x522	; 0x522 <timer0Init>
	timer0Start();
 250:	0e 94 a5 02 	call	0x54a	; 0x54a <timer0Start>
	sei();
 254:	78 94       	sei
	while (1)
	{
		 
		BTN_status=pushButtonGetStatus(BTN_0);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 8a 01 	call	0x314	; 0x314 <pushButtonGetStatus>
 25c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <BTN_status>
		Led_On(LED_0);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Led_On>
		if (BTN_status==Pressed)
 266:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <BTN_status>
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	d9 f4       	brne	.+54     	; 0x2a4 <main+0x72>
		{
			 
			count++;
 26e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <count>
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <count>
			while (count!=0)
 278:	10 c0       	rjmp	.+32     	; 0x29a <main+0x68>
			{
				count--;
 27a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <count>
 27e:	81 50       	subi	r24, 0x01	; 1
 280:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <count>
				while(sec<5)
 284:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <sec>
 288:	85 30       	cpi	r24, 0x05	; 5
 28a:	38 f4       	brcc	.+14     	; 0x29a <main+0x68>
				{
					 Led_On(LED_0);
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Led_On>
			 
			count++;
			while (count!=0)
			{
				count--;
				while(sec<5)
 292:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <sec>
 296:	85 30       	cpi	r24, 0x05	; 5
 298:	c8 f3       	brcs	.-14     	; 0x28c <main+0x5a>
		Led_On(LED_0);
		if (BTN_status==Pressed)
		{
			 
			count++;
			while (count!=0)
 29a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <count>
 29e:	81 11       	cpse	r24, r1
 2a0:	ec cf       	rjmp	.-40     	; 0x27a <main+0x48>
 2a2:	d9 cf       	rjmp	.-78     	; 0x256 <main+0x24>
		      } 
			}  
		}
		else
		{
			Led_Off(LED_0);
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_Off>
 2aa:	d5 cf       	rjmp	.-86     	; 0x256 <main+0x24>

000002ac <pushButtonInit>:
#include "softwareDelay.h"

/* This function is implemented to configure pushButton Pins as INPUT*/
void pushButtonInit(En_buttonId_t en_butotn_id)
{
	switch (en_butotn_id)
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	89 f0       	breq	.+34     	; 0x2d2 <pushButtonInit+0x26>
 2b0:	28 f0       	brcs	.+10     	; 0x2bc <pushButtonInit+0x10>
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	c9 f0       	breq	.+50     	; 0x2e8 <pushButtonInit+0x3c>
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	11 f1       	breq	.+68     	; 0x2fe <pushButtonInit+0x52>
 2ba:	08 95       	ret
	{
		case BTN_0:
		{
			gpioPinDirection(BTN_0_GPIO, BTN_0_BIT,INPUT);
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	60 e1       	ldi	r22, 0x10	; 16
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
			gpioPinWrite(BTN_0_GPIO, BTN_0_BIT,HIGH);     // to activate internal pull up resistor 
 2c6:	4f ef       	ldi	r20, 0xFF	; 255
 2c8:	60 e1       	ldi	r22, 0x10	; 16
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 2d0:	08 95       	ret
		}
		case BTN_1:
		{
			gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	64 e0       	ldi	r22, 0x04	; 4
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
			gpioPinWrite(BTN_1_GPIO, BTN_1_BIT,HIGH);     // to activate internal pull up resistor 
 2dc:	4f ef       	ldi	r20, 0xFF	; 255
 2de:	64 e0       	ldi	r22, 0x04	; 4
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 2e6:	08 95       	ret
		}
		case BTN_2:
		{
			gpioPinDirection(BTN_2_GPIO, BTN_2_BIT, INPUT);
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	64 e0       	ldi	r22, 0x04	; 4
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
			gpioPinWrite(BTN_2_GPIO, BTN_2_BIT,HIGH);     // to activate internal pull up resistor 
 2f2:	4f ef       	ldi	r20, 0xFF	; 255
 2f4:	64 e0       	ldi	r22, 0x04	; 4
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			
			break;
 2fc:	08 95       	ret
		}
		case BTN_3:
		{
			gpioPinDirection(BTN_3_GPIO, BTN_3_BIT, INPUT);
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	68 e0       	ldi	r22, 0x08	; 8
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
			gpioPinWrite(BTN_3_GPIO, BTN_3_BIT,HIGH);     // to activate internal pull up resistor 
 308:	4f ef       	ldi	r20, 0xFF	; 255
 30a:	68 e0       	ldi	r22, 0x08	; 8
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
 312:	08 95       	ret

00000314 <pushButtonGetStatus>:
		break;
	}
}

 En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	1f 92       	push	r1
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t buttonStatus=-1;
	volatile uint8_t pin_read;

	switch (en_butotn_id)
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	91 f1       	breq	.+100    	; 0x386 <pushButtonGetStatus+0x72>
 322:	38 f0       	brcs	.+14     	; 0x332 <pushButtonGetStatus+0x1e>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	09 f4       	brne	.+2      	; 0x32a <pushButtonGetStatus+0x16>
 328:	58 c0       	rjmp	.+176    	; 0x3da <pushButtonGetStatus+0xc6>
 32a:	83 30       	cpi	r24, 0x03	; 3
 32c:	09 f4       	brne	.+2      	; 0x330 <pushButtonGetStatus+0x1c>
 32e:	7e c0       	rjmp	.+252    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 330:	a5 c0       	rjmp	.+330    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	{
		case BTN_0:
		{
			pin_read=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
 332:	60 e1       	ldi	r22, 0x10	; 16
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	0e 94 9e 00 	call	0x13c	; 0x13c <gpioPinRead>
 33a:	89 83       	std	Y+1, r24	; 0x01
			if (pin_read==LOW)
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	81 11       	cpse	r24, r1
 340:	11 c0       	rjmp	.+34     	; 0x364 <pushButtonGetStatus+0x50>
			{
				SwDelay_ms(30);
 342:	6e e1       	ldi	r22, 0x1E	; 30
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
 34e:	60 e1       	ldi	r22, 0x10	; 16
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	0e 94 9e 00 	call	0x13c	; 0x13c <gpioPinRead>
 356:	89 83       	std	Y+1, r24	; 0x01
				if (pin_read==LOW)
 358:	89 81       	ldd	r24, Y+1	; 0x01
 35a:	88 23       	and	r24, r24
 35c:	09 f4       	brne	.+2      	; 0x360 <pushButtonGetStatus+0x4c>
 35e:	90 c0       	rjmp	.+288    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
				{
					buttonStatus= Pressed;
				}
				else
				{
					buttonStatus= Released;
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	9d c0       	rjmp	.+314    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
				}
			}
			else
			{
				SwDelay_ms(30);
 364:	6e e1       	ldi	r22, 0x1E	; 30
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
 370:	60 e1       	ldi	r22, 0x10	; 16
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	0e 94 9e 00 	call	0x13c	; 0x13c <gpioPinRead>
 378:	89 83       	std	Y+1, r24	; 0x01
				if (pin_read==LOW)
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	88 23       	and	r24, r24
 37e:	09 f4       	brne	.+2      	; 0x382 <pushButtonGetStatus+0x6e>
 380:	81 c0       	rjmp	.+258    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
					buttonStatus= Pressed;
				
				}
				else
				{
					buttonStatus= Released;
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	8c c0       	rjmp	.+280    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			break;
		}
	
		case BTN_1:
		{
			pin_read=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
 386:	64 e0       	ldi	r22, 0x04	; 4
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 9e 00 	call	0x13c	; 0x13c <gpioPinRead>
 38e:	89 83       	std	Y+1, r24	; 0x01
			if (pin_read==0)
 390:	89 81       	ldd	r24, Y+1	; 0x01
 392:	81 11       	cpse	r24, r1
 394:	11 c0       	rjmp	.+34     	; 0x3b8 <pushButtonGetStatus+0xa4>
			{
				SwDelay_ms(30);
 396:	6e e1       	ldi	r22, 0x1E	; 30
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
 3a2:	64 e0       	ldi	r22, 0x04	; 4
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 9e 00 	call	0x13c	; 0x13c <gpioPinRead>
 3aa:	89 83       	std	Y+1, r24	; 0x01
			
				if (pin_read==0)
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	88 23       	and	r24, r24
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <pushButtonGetStatus+0xa0>
 3b2:	6a c0       	rjmp	.+212    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
					buttonStatus= Pressed;
				
				}
				else
				{
					buttonStatus= Released;
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	73 c0       	rjmp	.+230    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
				}
			}
			else
			{
				SwDelay_ms(30);
 3b8:	6e e1       	ldi	r22, 0x1E	; 30
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
 3c4:	64 e0       	ldi	r22, 0x04	; 4
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 9e 00 	call	0x13c	; 0x13c <gpioPinRead>
 3cc:	89 83       	std	Y+1, r24	; 0x01
				if (pin_read==0)
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	88 23       	and	r24, r24
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <pushButtonGetStatus+0xc2>
 3d4:	5b c0       	rjmp	.+182    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
					buttonStatus= Pressed;
				
				}
				else
				{
					buttonStatus= Released;
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	62 c0       	rjmp	.+196    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			}
			break;
		}
		case BTN_2:
		{
			pin_read=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
 3da:	64 e0       	ldi	r22, 0x04	; 4
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 9e 00 	call	0x13c	; 0x13c <gpioPinRead>
 3e2:	89 83       	std	Y+1, r24	; 0x01
			if (pin_read==0)
 3e4:	89 81       	ldd	r24, Y+1	; 0x01
 3e6:	81 11       	cpse	r24, r1
 3e8:	11 c0       	rjmp	.+34     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			{
				SwDelay_ms(30);
 3ea:	6e e1       	ldi	r22, 0x1E	; 30
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
 3f6:	64 e0       	ldi	r22, 0x04	; 4
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 9e 00 	call	0x13c	; 0x13c <gpioPinRead>
 3fe:	89 83       	std	Y+1, r24	; 0x01
			
				if (pin_read==0)
 400:	89 81       	ldd	r24, Y+1	; 0x01
 402:	88 23       	and	r24, r24
 404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	44 c0       	rjmp	.+136    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
					buttonStatus= Pressed;
				
				}
				else
				{
					buttonStatus= Released;
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	49 c0       	rjmp	.+146    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
				}
			}
			else
			{
				SwDelay_ms(30);
 40c:	6e e1       	ldi	r22, 0x1E	; 30
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
 418:	64 e0       	ldi	r22, 0x04	; 4
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 9e 00 	call	0x13c	; 0x13c <gpioPinRead>
 420:	89 83       	std	Y+1, r24	; 0x01
				if (pin_read==0)
 422:	89 81       	ldd	r24, Y+1	; 0x01
 424:	88 23       	and	r24, r24
 426:	b1 f1       	breq	.+108    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
					buttonStatus= Pressed;
				
				}
				else
				{
					buttonStatus= Released;
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	39 c0       	rjmp	.+114    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			}
			break;
		}
		case BTN_3:
		{
			pin_read=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
 42c:	68 e0       	ldi	r22, 0x08	; 8
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	0e 94 9e 00 	call	0x13c	; 0x13c <gpioPinRead>
 434:	89 83       	std	Y+1, r24	; 0x01
			if (pin_read==0)
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	81 11       	cpse	r24, r1
 43a:	10 c0       	rjmp	.+32     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			{
				SwDelay_ms(30);
 43c:	6e e1       	ldi	r22, 0x1E	; 30
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
 448:	68 e0       	ldi	r22, 0x08	; 8
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 9e 00 	call	0x13c	; 0x13c <gpioPinRead>
 450:	89 83       	std	Y+1, r24	; 0x01
			
				if (pin_read==0)
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	88 23       	and	r24, r24
 456:	01 f1       	breq	.+64     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
					buttonStatus= Pressed;
				
				}
				else
				{
					buttonStatus= Released;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	21 c0       	rjmp	.+66     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
				}
			}
			else
			{
				SwDelay_ms(30);
 45c:	6e e1       	ldi	r22, 0x1E	; 30
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
 468:	68 e0       	ldi	r22, 0x08	; 8
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 9e 00 	call	0x13c	; 0x13c <gpioPinRead>
 470:	89 83       	std	Y+1, r24	; 0x01
				if (pin_read==0)
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	88 23       	and	r24, r24
 476:	91 f0       	breq	.+36     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
				{
					buttonStatus= Pressed;
				}
				else
				{
					buttonStatus= Released;
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	11 c0       	rjmp	.+34     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
}

 En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
	
	uint8_t buttonStatus=-1;
 47c:	8f ef       	ldi	r24, 0xFF	; 255
 47e:	0f c0       	rjmp	.+30     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			{
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
				if (pin_read==LOW)
				{
					buttonStatus= Pressed;
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	0d c0       	rjmp	.+26     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			{
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
				if (pin_read==LOW)
				{
					buttonStatus= Pressed;
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	0b c0       	rjmp	.+22     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
			
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	09 c0       	rjmp	.+18     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			{
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	07 c0       	rjmp	.+14     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
			
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	05 c0       	rjmp	.+10     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			{
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	03 c0       	rjmp	.+6      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
			
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 498:	82 e0       	ldi	r24, 0x02	; 2
 49a:	01 c0       	rjmp	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			{
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 49c:	82 e0       	ldi	r24, 0x02	; 2
		default :
		break;
	}
	return buttonStatus;

}
 49e:	0f 90       	pop	r0
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <SwDelay_ms>:
 *  Author: A_ayman
 */ 
#include "softwareDelay.h"

void SwDelay_ms(uint32_t n)
{
 4a6:	cf 92       	push	r12
 4a8:	df 92       	push	r13
 4aa:	ef 92       	push	r14
 4ac:	ff 92       	push	r15
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	00 d0       	rcall	.+0      	; 0x4b4 <SwDelay_ms+0xe>
 4b4:	00 d0       	rcall	.+0      	; 0x4b6 <SwDelay_ms+0x10>
 4b6:	cd b7       	in	r28, 0x3d	; 61
 4b8:	de b7       	in	r29, 0x3e	; 62
 4ba:	6b 01       	movw	r12, r22
 4bc:	7c 01       	movw	r14, r24
	/*  for each n delay it will give you n ms */
   /* the value of internal_iteration_NO may be less than or greater than the value i choose */
	/* because of the context switching between functions and how much time does it take. */
	/*
	/*/
	volatile uint32_t z=0;
 4be:	19 82       	std	Y+1, r1	; 0x01
 4c0:	1a 82       	std	Y+2, r1	; 0x02
 4c2:	1b 82       	std	Y+3, r1	; 0x03
 4c4:	1c 82       	std	Y+4, r1	; 0x04
   uint16_t j=0;
	uint32_t i=0;
	
	for(i=0; i<n;i++)
 4c6:	67 2b       	or	r22, r23
 4c8:	68 2b       	or	r22, r24
 4ca:	69 2b       	or	r22, r25
 4cc:	c9 f4       	brne	.+50     	; 0x500 <SwDelay_ms+0x5a>
 4ce:	1e c0       	rjmp	.+60     	; 0x50c <SwDelay_ms+0x66>
	{
		for( j=0; j<internal_iteration_NO;j++) //the number of internal iteration related to the kindd of the command and how many cycles does it take.
		{
			z++; //it can be any instruction Just for not making the compiler ignore the loop.
 4d0:	89 81       	ldd	r24, Y+1	; 0x01
 4d2:	9a 81       	ldd	r25, Y+2	; 0x02
 4d4:	ab 81       	ldd	r26, Y+3	; 0x03
 4d6:	bc 81       	ldd	r27, Y+4	; 0x04
 4d8:	01 96       	adiw	r24, 0x01	; 1
 4da:	a1 1d       	adc	r26, r1
 4dc:	b1 1d       	adc	r27, r1
 4de:	89 83       	std	Y+1, r24	; 0x01
 4e0:	9a 83       	std	Y+2, r25	; 0x02
 4e2:	ab 83       	std	Y+3, r26	; 0x03
 4e4:	bc 83       	std	Y+4, r27	; 0x04
 4e6:	21 50       	subi	r18, 0x01	; 1
 4e8:	31 09       	sbc	r19, r1
   uint16_t j=0;
	uint32_t i=0;
	
	for(i=0; i<n;i++)
	{
		for( j=0; j<internal_iteration_NO;j++) //the number of internal iteration related to the kindd of the command and how many cycles does it take.
 4ea:	91 f7       	brne	.-28     	; 0x4d0 <SwDelay_ms+0x2a>
	/*/
	volatile uint32_t z=0;
   uint16_t j=0;
	uint32_t i=0;
	
	for(i=0; i<n;i++)
 4ec:	4f 5f       	subi	r20, 0xFF	; 255
 4ee:	5f 4f       	sbci	r21, 0xFF	; 255
 4f0:	6f 4f       	sbci	r22, 0xFF	; 255
 4f2:	7f 4f       	sbci	r23, 0xFF	; 255
 4f4:	c4 16       	cp	r12, r20
 4f6:	d5 06       	cpc	r13, r21
 4f8:	e6 06       	cpc	r14, r22
 4fa:	f7 06       	cpc	r15, r23
 4fc:	21 f4       	brne	.+8      	; 0x506 <SwDelay_ms+0x60>
 4fe:	06 c0       	rjmp	.+12     	; 0x50c <SwDelay_ms+0x66>
 500:	40 e0       	ldi	r20, 0x00	; 0
 502:	50 e0       	ldi	r21, 0x00	; 0
 504:	ba 01       	movw	r22, r20
 *  Author: A_ayman
 */ 
#include "softwareDelay.h"

void SwDelay_ms(uint32_t n)
{
 506:	29 e4       	ldi	r18, 0x49	; 73
 508:	31 e0       	ldi	r19, 0x01	; 1
 50a:	e2 cf       	rjmp	.-60     	; 0x4d0 <SwDelay_ms+0x2a>
		{
			z++; //it can be any instruction Just for not making the compiler ignore the loop.
			
		}	
	}
}
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	ff 90       	pop	r15
 51a:	ef 90       	pop	r14
 51c:	df 90       	pop	r13
 51e:	cf 90       	pop	r12
 520:	08 95       	ret

00000522 <timer0Init>:
	gpioPinWrite(GPIOB,BIT4,HIGH);
	Led_On(LED_0);
	timer0DelayMs(Ton);
	gpioPinWrite(GPIOB,BIT4,LOW);
	timer0DelayMs(Toff);	
}
 522:	ef 92       	push	r14
 524:	0f 93       	push	r16
 526:	93 b7       	in	r25, 0x33	; 51
 528:	89 2b       	or	r24, r25
 52a:	83 bf       	out	0x33, r24	; 51
 52c:	83 b7       	in	r24, 0x33	; 51
 52e:	68 2b       	or	r22, r24
 530:	63 bf       	out	0x33, r22	; 51
 532:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <prescal>
 536:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <_edata>
 53a:	22 bf       	out	0x32, r18	; 50
 53c:	0c bf       	out	0x3c, r16	; 60
 53e:	89 b7       	in	r24, 0x39	; 57
 540:	e8 2a       	or	r14, r24
 542:	e9 be       	out	0x39, r14	; 57
 544:	0f 91       	pop	r16
 546:	ef 90       	pop	r14
 548:	08 95       	ret

0000054a <timer0Start>:
 54a:	93 b7       	in	r25, 0x33	; 51
 54c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <prescal>
 550:	89 2b       	or	r24, r25
 552:	83 bf       	out	0x33, r24	; 51
 554:	08 95       	ret

00000556 <__vector_11>:



ISR(TIMER0_OVF_vect)
{
 556:	1f 92       	push	r1
 558:	0f 92       	push	r0
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	0f 92       	push	r0
 55e:	11 24       	eor	r1, r1
 560:	2f 93       	push	r18
 562:	3f 93       	push	r19
 564:	4f 93       	push	r20
 566:	5f 93       	push	r21
 568:	6f 93       	push	r22
 56a:	7f 93       	push	r23
 56c:	8f 93       	push	r24
 56e:	9f 93       	push	r25
 570:	af 93       	push	r26
 572:	bf 93       	push	r27
 574:	ef 93       	push	r30
 576:	ff 93       	push	r31
	 ov_counts++;
 578:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ov_counts>
 57c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ov_counts+0x1>
 580:	01 96       	adiw	r24, 0x01	; 1
 582:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <ov_counts+0x1>
 586:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ov_counts>
	  if(sec==5)
 58a:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <sec>
 58e:	25 30       	cpi	r18, 0x05	; 5
 590:	11 f4       	brne	.+4      	; 0x596 <__vector_11+0x40>
	  {
		  sec=0;
 592:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <sec>
	  }
	 if(ov_counts==680) //we need 4000 over flow to get 170 msec//
 596:	88 3a       	cpi	r24, 0xA8	; 168
 598:	92 40       	sbci	r25, 0x02	; 2
 59a:	b9 f4       	brne	.+46     	; 0x5ca <__vector_11+0x74>
	 {
		  BTN_status=pushButtonGetStatus(BTN_0);
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	0e 94 8a 01 	call	0x314	; 0x314 <pushButtonGetStatus>
 5a2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <BTN_status>
		  if (BTN_status==Pressed)
 5a6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <BTN_status>
 5aa:	82 30       	cpi	r24, 0x02	; 2
 5ac:	29 f4       	brne	.+10     	; 0x5b8 <__vector_11+0x62>
		  {
			  count++;
 5ae:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <count>
 5b2:	8f 5f       	subi	r24, 0xFF	; 255
 5b4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <count>
		  }
		  sec++;
 5b8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <sec>
 5bc:	8f 5f       	subi	r24, 0xFF	; 255
 5be:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <sec>
		 
		  ov_counts=0;
 5c2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <ov_counts+0x1>
 5c6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <ov_counts>
	 }	 
	  TCNT0=6;
 5ca:	86 e0       	ldi	r24, 0x06	; 6
 5cc:	82 bf       	out	0x32, r24	; 50
}
 5ce:	ff 91       	pop	r31
 5d0:	ef 91       	pop	r30
 5d2:	bf 91       	pop	r27
 5d4:	af 91       	pop	r26
 5d6:	9f 91       	pop	r25
 5d8:	8f 91       	pop	r24
 5da:	7f 91       	pop	r23
 5dc:	6f 91       	pop	r22
 5de:	5f 91       	pop	r21
 5e0:	4f 91       	pop	r20
 5e2:	3f 91       	pop	r19
 5e4:	2f 91       	pop	r18
 5e6:	0f 90       	pop	r0
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	0f 90       	pop	r0
 5ec:	1f 90       	pop	r1
 5ee:	18 95       	reti

000005f0 <_exit>:
 5f0:	f8 94       	cli

000005f2 <__stop_program>:
 5f2:	ff cf       	rjmp	.-2      	; 0x5f2 <__stop_program>
