
GPIO_REQ10_REQ9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000310  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000384  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001436  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000887  00000000  00000000  0000193e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078b  00000000  00000000  000021c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00002950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000930  00000000  00000000  00002b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ce4  00000000  00000000  000034a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004184  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  74:	0c 94 86 01 	jmp	0x30c	; 0x30c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <gpioPinDirection>:
/* This function determine the direction of a specific Pin or pins by ANDing the PORTx Direction with NOT Pins Mask if the Required Direction is INPUT */
/* and ORing the PORTx Direction with Pins Mask if the Required Direction is OUTPUT */

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
	if( u8_direction == INPUT)
  7c:	41 11       	cpse	r20, r1
  7e:	1c c0       	rjmp	.+56     	; 0xb8 <gpioPinDirection+0x3c>
	{
		switch(u8_port)
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	59 f0       	breq	.+22     	; 0x9a <gpioPinDirection+0x1e>
  84:	28 f0       	brcs	.+10     	; 0x90 <gpioPinDirection+0x14>
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	69 f0       	breq	.+26     	; 0xa4 <gpioPinDirection+0x28>
  8a:	83 30       	cpi	r24, 0x03	; 3
  8c:	81 f0       	breq	.+32     	; 0xae <gpioPinDirection+0x32>
  8e:	08 95       	ret
		{
			case GPIOA: PORTA_DIR &= ~(u8_pins);break;
  90:	8a b3       	in	r24, 0x1a	; 26
  92:	60 95       	com	r22
  94:	68 23       	and	r22, r24
  96:	6a bb       	out	0x1a, r22	; 26
  98:	08 95       	ret
			case GPIOB: PORTB_DIR &= ~(u8_pins);break;
  9a:	87 b3       	in	r24, 0x17	; 23
  9c:	60 95       	com	r22
  9e:	68 23       	and	r22, r24
  a0:	67 bb       	out	0x17, r22	; 23
  a2:	08 95       	ret
			case GPIOC: PORTC_DIR &= ~(u8_pins);break;
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	60 95       	com	r22
  a8:	68 23       	and	r22, r24
  aa:	64 bb       	out	0x14, r22	; 20
  ac:	08 95       	ret
			case GPIOD: PORTD_DIR &= ~(u8_pins);break;
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	60 95       	com	r22
  b2:	68 23       	and	r22, r24
  b4:	61 bb       	out	0x11, r22	; 17
  b6:	08 95       	ret
			default: break;
		}
	}
	
	else if( u8_direction == OUTPUT)
  b8:	4f 3f       	cpi	r20, 0xFF	; 255
  ba:	b9 f4       	brne	.+46     	; 0xea <gpioPinDirection+0x6e>
	{
		switch(u8_port)
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	51 f0       	breq	.+20     	; 0xd4 <gpioPinDirection+0x58>
  c0:	28 f0       	brcs	.+10     	; 0xcc <gpioPinDirection+0x50>
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	59 f0       	breq	.+22     	; 0xdc <gpioPinDirection+0x60>
  c6:	83 30       	cpi	r24, 0x03	; 3
  c8:	69 f0       	breq	.+26     	; 0xe4 <gpioPinDirection+0x68>
  ca:	08 95       	ret
		{
			case GPIOA: PORTA_DIR |= (u8_pins);break;
  cc:	8a b3       	in	r24, 0x1a	; 26
  ce:	68 2b       	or	r22, r24
  d0:	6a bb       	out	0x1a, r22	; 26
  d2:	08 95       	ret
			case GPIOB: PORTB_DIR |= (u8_pins);break;
  d4:	87 b3       	in	r24, 0x17	; 23
  d6:	68 2b       	or	r22, r24
  d8:	67 bb       	out	0x17, r22	; 23
  da:	08 95       	ret
			case GPIOC: PORTC_DIR |= (u8_pins);break;
  dc:	84 b3       	in	r24, 0x14	; 20
  de:	68 2b       	or	r22, r24
  e0:	64 bb       	out	0x14, r22	; 20
  e2:	08 95       	ret
			case GPIOD: PORTD_DIR |= (u8_pins);break;
  e4:	81 b3       	in	r24, 0x11	; 17
  e6:	68 2b       	or	r22, r24
  e8:	61 bb       	out	0x11, r22	; 17
  ea:	08 95       	ret

000000ec <gpioPinWrite>:
/* After that we make sure of the value by ANDing the Pin Mask with the desired value*/
/* Finally ORing PORTx DATA with the value*/
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
	uint8_t temp_reg;
	switch(u8_port)
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	71 f0       	breq	.+28     	; 0x10c <gpioPinWrite+0x20>
  f0:	28 f0       	brcs	.+10     	; 0xfc <gpioPinWrite+0x10>
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	99 f0       	breq	.+38     	; 0x11c <gpioPinWrite+0x30>
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	c9 f0       	breq	.+50     	; 0x12c <gpioPinWrite+0x40>
  fa:	08 95       	ret
	{
		case GPIOA:
		{
			 temp_reg = PORTA_DATA & ~(u8_pins);
  fc:	8b b3       	in	r24, 0x1b	; 27
			 u8_value = (u8_pins & u8_value);
			 PORTA_DATA = temp_reg |u8_value ;
  fe:	96 2f       	mov	r25, r22
 100:	90 95       	com	r25
 102:	89 23       	and	r24, r25
 104:	46 23       	and	r20, r22
 106:	48 2b       	or	r20, r24
 108:	4b bb       	out	0x1b, r20	; 27
			 break;
 10a:	08 95       	ret
		}
		case GPIOB:
		{ 
			temp_reg = PORTB_DATA & ~(u8_pins);
 10c:	88 b3       	in	r24, 0x18	; 24
			u8_value = (u8_pins & u8_value);
			PORTB_DATA = temp_reg | ( u8_value);
 10e:	96 2f       	mov	r25, r22
 110:	90 95       	com	r25
 112:	89 23       	and	r24, r25
 114:	46 23       	and	r20, r22
 116:	48 2b       	or	r20, r24
 118:	48 bb       	out	0x18, r20	; 24
			break;
 11a:	08 95       	ret
		}
		case GPIOC:
		{
			temp_reg = PORTC_DATA & ~(u8_pins);
 11c:	85 b3       	in	r24, 0x15	; 21
			u8_value = (u8_pins & u8_value);
			PORTC_DATA = temp_reg | ( u8_value);
 11e:	96 2f       	mov	r25, r22
 120:	90 95       	com	r25
 122:	89 23       	and	r24, r25
 124:	46 23       	and	r20, r22
 126:	48 2b       	or	r20, r24
 128:	45 bb       	out	0x15, r20	; 21
			break;
 12a:	08 95       	ret
		}
		case GPIOD:
		{
			temp_reg = PORTD_DATA & ~(u8_pins);
 12c:	82 b3       	in	r24, 0x12	; 18
			u8_value =(u8_pins & u8_value);
			PORTD_DATA = temp_reg | (u8_value);
 12e:	96 2f       	mov	r25, r22
 130:	90 95       	com	r25
 132:	89 23       	and	r24, r25
 134:	46 23       	and	r20, r22
 136:	48 2b       	or	r20, r24
 138:	42 bb       	out	0x12, r20	; 18
 13a:	08 95       	ret

0000013c <Led_Init>:
#include "gpio.h"
/* This function is used to configure the direction of the led Pins as OUTPUT*/
/* Based on gpioPinDirection function */
void Led_Init(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	61 f0       	breq	.+24     	; 0x158 <Led_Init+0x1c>
 140:	28 f0       	brcs	.+10     	; 0x14c <Led_Init+0x10>
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	79 f0       	breq	.+30     	; 0x164 <Led_Init+0x28>
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	99 f0       	breq	.+38     	; 0x170 <Led_Init+0x34>
 14a:	08 95       	ret
	{
		case LED_0:
		{
			gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
 14c:	4f ef       	ldi	r20, 0xFF	; 255
 14e:	60 e1       	ldi	r22, 0x10	; 16
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
			break;
 156:	08 95       	ret
		}
		case LED_1:
		{
			gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
 158:	4f ef       	ldi	r20, 0xFF	; 255
 15a:	60 e2       	ldi	r22, 0x20	; 32
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
			break;
 162:	08 95       	ret
		}
		case LED_2:
		{
			gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
 164:	4f ef       	ldi	r20, 0xFF	; 255
 166:	60 e4       	ldi	r22, 0x40	; 64
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
			break;
 16e:	08 95       	ret
		}
		case LED_3:
		{
			gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
 170:	4f ef       	ldi	r20, 0xFF	; 255
 172:	60 e8       	ldi	r22, 0x80	; 128
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
 17a:	08 95       	ret

0000017c <Led_On>:

/* This function is implemented to choose which led we want to turn on by sending its number*/
/* Based on gpioPinwrite function with HIGH value*/
void Led_On(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	61 f0       	breq	.+24     	; 0x198 <Led_On+0x1c>
 180:	28 f0       	brcs	.+10     	; 0x18c <Led_On+0x10>
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	79 f0       	breq	.+30     	; 0x1a4 <Led_On+0x28>
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	99 f0       	breq	.+38     	; 0x1b0 <Led_On+0x34>
 18a:	08 95       	ret
	{
		case LED_0:
		{
			 gpioPinWrite(LED_0_GPIO,LED_0_BIT, HIGH);
 18c:	4f ef       	ldi	r20, 0xFF	; 255
 18e:	60 e1       	ldi	r22, 0x10	; 16
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 196:	08 95       	ret
		}
		case LED_1:
		{
			 gpioPinWrite(LED_1_GPIO,LED_1_BIT, HIGH);
 198:	4f ef       	ldi	r20, 0xFF	; 255
 19a:	60 e2       	ldi	r22, 0x20	; 32
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 1a2:	08 95       	ret
		}
		case LED_2:
		{
			 gpioPinWrite(LED_2_GPIO,LED_2_BIT, HIGH);
 1a4:	4f ef       	ldi	r20, 0xFF	; 255
 1a6:	60 e4       	ldi	r22, 0x40	; 64
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 1ae:	08 95       	ret
		}
		case LED_3:
		{
			 gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
 1b0:	4f ef       	ldi	r20, 0xFF	; 255
 1b2:	60 e8       	ldi	r22, 0x80	; 128
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
 1ba:	08 95       	ret

000001bc <Led_Off>:

/* This function is implemented to choose which led we want to turn off by sending its number*/
/* Based on gpioPinwrite function with LAW value*/
void Led_Off(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	61 f0       	breq	.+24     	; 0x1d8 <Led_Off+0x1c>
 1c0:	28 f0       	brcs	.+10     	; 0x1cc <Led_Off+0x10>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	79 f0       	breq	.+30     	; 0x1e4 <Led_Off+0x28>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	99 f0       	breq	.+38     	; 0x1f0 <Led_Off+0x34>
 1ca:	08 95       	ret
	{
		case LED_0:
		{
			gpioPinWrite(LED_0_GPIO,LED_0_BIT, LOW);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	60 e1       	ldi	r22, 0x10	; 16
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 1d6:	08 95       	ret
		}
		case LED_1:
		{
			gpioPinWrite(LED_1_GPIO,LED_1_BIT, LOW);
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	60 e2       	ldi	r22, 0x20	; 32
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 1e2:	08 95       	ret
		}
		case LED_2:
		{
			gpioPinWrite(LED_2_GPIO,LED_2_BIT, LOW);
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	60 e4       	ldi	r22, 0x40	; 64
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 1ee:	08 95       	ret
		}
		case LED_3:
		{
			gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	60 e8       	ldi	r22, 0x80	; 128
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
 1fa:	08 95       	ret

000001fc <periodic_state_machine>:


void periodic_state_machine(void)
{
	static uint8_t machine_no=0;
	switch(machine_no)
 1fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	91 f0       	breq	.+36     	; 0x228 <periodic_state_machine+0x2c>
 204:	18 f0       	brcs	.+6      	; 0x20c <periodic_state_machine+0x10>
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	e9 f0       	breq	.+58     	; 0x244 <periodic_state_machine+0x48>
 20a:	08 95       	ret
	{
		case(0):
		Led_Off(LED_2);
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	0e 94 de 00 	call	0x1bc	; 0x1bc <Led_Off>
		Led_On(LED_1);         // it means go..
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 be 00 	call	0x17c	; 0x17c <Led_On>
		timer0DelayMs(1000);
 218:	88 ee       	ldi	r24, 0xE8	; 232
 21a:	93 e0       	ldi	r25, 0x03	; 3
 21c:	0e 94 66 01 	call	0x2cc	; 0x2cc <timer0DelayMs>
		machine_no=1;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		break;
 226:	08 95       	ret
		case (1):
		Led_Off(LED_1);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 de 00 	call	0x1bc	; 0x1bc <Led_Off>
		Led_On(LED_3);        // it means stop.
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	0e 94 be 00 	call	0x17c	; 0x17c <Led_On>
		timer0DelayMs(1000);
 234:	88 ee       	ldi	r24, 0xE8	; 232
 236:	93 e0       	ldi	r25, 0x03	; 3
 238:	0e 94 66 01 	call	0x2cc	; 0x2cc <timer0DelayMs>
		machine_no=2;
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		break;
 242:	08 95       	ret
		case (2):
		Led_Off(LED_3);
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	0e 94 de 00 	call	0x1bc	; 0x1bc <Led_Off>
		Led_On(LED_2);
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	0e 94 be 00 	call	0x17c	; 0x17c <Led_On>
		timer0DelayMs(1000);     // it means get ready.
 250:	88 ee       	ldi	r24, 0xE8	; 232
 252:	93 e0       	ldi	r25, 0x03	; 3
 254:	0e 94 66 01 	call	0x2cc	; 0x2cc <timer0DelayMs>
		machine_no=0;
 258:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 25c:	08 95       	ret

0000025e <main>:


int main(void)
{
	/* Replace with your application code */
	Led_Init(LED_1);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 9e 00 	call	0x13c	; 0x13c <Led_Init>
	Led_Init(LED_2);
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	0e 94 9e 00 	call	0x13c	; 0x13c <Led_Init>
	Led_Init(LED_3);
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	0e 94 9e 00 	call	0x13c	; 0x13c <Led_Init>
	timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_8,0,0,T0_INTERRUPT_NORMAL);
 270:	ee 24       	eor	r14, r14
 272:	e3 94       	inc	r14
 274:	00 e0       	ldi	r16, 0x00	; 0
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	42 e0       	ldi	r20, 0x02	; 2
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 46 01 	call	0x28c	; 0x28c <timer0Init>
	timer0Start();
 282:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <timer0Start>
	while (1)
	{
		periodic_state_machine();
 286:	0e 94 fe 00 	call	0x1fc	; 0x1fc <periodic_state_machine>
 28a:	fd cf       	rjmp	.-6      	; 0x286 <main+0x28>

0000028c <timer0Init>:

uint8_t timer0Read(void)
{
	volatile uint8_t timer0_Read= TCNT0;
	 return timer0_Read;
}
 28c:	ef 92       	push	r14
 28e:	0f 93       	push	r16
 290:	93 b7       	in	r25, 0x33	; 51
 292:	89 2b       	or	r24, r25
 294:	83 bf       	out	0x33, r24	; 51
 296:	83 b7       	in	r24, 0x33	; 51
 298:	68 2b       	or	r22, r24
 29a:	63 bf       	out	0x33, r22	; 51
 29c:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <prescal>
 2a0:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <re_prescal>
 2a4:	22 bf       	out	0x32, r18	; 50
 2a6:	0c bf       	out	0x3c, r16	; 60
 2a8:	89 b7       	in	r24, 0x39	; 57
 2aa:	e8 2a       	or	r14, r24
 2ac:	e9 be       	out	0x39, r14	; 57
 2ae:	0f 91       	pop	r16
 2b0:	ef 90       	pop	r14
 2b2:	08 95       	ret

000002b4 <timer0Start>:
void timer0Start(void)
{
	TCCR0|=prescal;
 2b4:	93 b7       	in	r25, 0x33	; 51
 2b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <prescal>
 2ba:	89 2b       	or	r24, r25
 2bc:	83 bf       	out	0x33, r24	; 51
 2be:	08 95       	ret

000002c0 <timer0Stop>:
}

void timer0Stop(void)
{
	TCCR0&=~(0x07);
 2c0:	83 b7       	in	r24, 0x33	; 51
 2c2:	88 7f       	andi	r24, 0xF8	; 248
 2c4:	83 bf       	out	0x33, r24	; 51
	TCCR0|=T0_NO_CLOCK;
 2c6:	83 b7       	in	r24, 0x33	; 51
 2c8:	83 bf       	out	0x33, r24	; 51
 2ca:	08 95       	ret

000002cc <timer0DelayMs>:
	
}
	
void timer0DelayMs(uint16_t u16_delay_in_ms)
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	ec 01       	movw	r28, r24
		timer_delay.timer_init_value=24;
		break;
		default:
		break;
	}	
	timer0Start();
 2d2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <timer0Start>
	for (i=0;i<u16_delay_in_ms;i++)
 2d6:	20 97       	sbiw	r28, 0x00	; 0
 2d8:	a1 f0       	breq	.+40     	; 0x302 <timer0DelayMs+0x36>
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	50 e0       	ldi	r21, 0x00	; 0
	{
		TCNT0=timer_delay.timer_init_value;	
 2de:	98 e1       	ldi	r25, 0x18	; 24
 2e0:	92 bf       	out	0x32, r25	; 50
 2e2:	24 e0       	ldi	r18, 0x04	; 4
 2e4:	30 e0       	ldi	r19, 0x00	; 0
		for( j=0;j<=timer_delay.OV_count;j++)
		{
			//while((TIFR>>TOV0)&1==0);
			while((TIFR & 1)!=1);
 2e6:	08 b6       	in	r0, 0x38	; 56
 2e8:	00 fe       	sbrs	r0, 0
 2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <timer0DelayMs+0x1a>
			TIFR|=0x01;
 2ec:	88 b7       	in	r24, 0x38	; 56
 2ee:	81 60       	ori	r24, 0x01	; 1
 2f0:	88 bf       	out	0x38, r24	; 56
 2f2:	21 50       	subi	r18, 0x01	; 1
 2f4:	31 09       	sbc	r19, r1
	}	
	timer0Start();
	for (i=0;i<u16_delay_in_ms;i++)
	{
		TCNT0=timer_delay.timer_init_value;	
		for( j=0;j<=timer_delay.OV_count;j++)
 2f6:	b9 f7       	brne	.-18     	; 0x2e6 <timer0DelayMs+0x1a>
		break;
		default:
		break;
	}	
	timer0Start();
	for (i=0;i<u16_delay_in_ms;i++)
 2f8:	4f 5f       	subi	r20, 0xFF	; 255
 2fa:	5f 4f       	sbci	r21, 0xFF	; 255
 2fc:	c4 17       	cp	r28, r20
 2fe:	d5 07       	cpc	r29, r21
 300:	79 f7       	brne	.-34     	; 0x2e0 <timer0DelayMs+0x14>
			//while((TIFR>>TOV0)&1==0);
			while((TIFR & 1)!=1);
			TIFR|=0x01;
		}
	}
	timer0Stop();
 302:	0e 94 60 01 	call	0x2c0	; 0x2c0 <timer0Stop>
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <_exit>:
 30c:	f8 94       	cli

0000030e <__stop_program>:
 30e:	ff cf       	rjmp	.-2      	; 0x30e <__stop_program>
