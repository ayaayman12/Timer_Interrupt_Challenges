
Car_App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000094c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000009c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  000009c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c43  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000984  00000000  00000000  000027df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a6d  00000000  00000000  00003163  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  00003bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c14  00000000  00000000  00003f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001313  00000000  00000000  00004b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005e57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 bc 01 	call	0x378	; 0x378 <main>
  74:	0c 94 a4 04 	jmp	0x948	; 0x948 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <MotorDC_Init>:
#include "gpio.h"
#include "dcMotor.h"
#include "timers.h"
void MotorDC_Init(En_motorType_t en_motor_number)
{
	 switch(en_motor_number)
  7c:	88 23       	and	r24, r24
  7e:	19 f0       	breq	.+6      	; 0x86 <MotorDC_Init+0xa>
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	89 f0       	breq	.+34     	; 0xa6 <MotorDC_Init+0x2a>
  84:	08 95       	ret
	 {
		  case MOT_1: 
		  {
				gpioPinDirection(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,OUTPUT);
  86:	4f ef       	ldi	r20, 0xFF	; 255
  88:	64 e0       	ldi	r22, 0x04	; 4
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	0e 94 b7 00 	call	0x16e	; 0x16e <gpioPinDirection>
				gpioPinDirection(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,OUTPUT);
  90:	4f ef       	ldi	r20, 0xFF	; 255
  92:	68 e0       	ldi	r22, 0x08	; 8
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	0e 94 b7 00 	call	0x16e	; 0x16e <gpioPinDirection>
				gpioPinDirection(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,OUTPUT);
  9a:	4f ef       	ldi	r20, 0xFF	; 255
  9c:	60 e1       	ldi	r22, 0x10	; 16
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	0e 94 b7 00 	call	0x16e	; 0x16e <gpioPinDirection>
				break;
  a4:	08 95       	ret
		  }
		  case MOT_2:
		  {
			  gpioPinDirection(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,OUTPUT);
  a6:	4f ef       	ldi	r20, 0xFF	; 255
  a8:	60 e4       	ldi	r22, 0x40	; 64
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 b7 00 	call	0x16e	; 0x16e <gpioPinDirection>
			  gpioPinDirection(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,OUTPUT);
  b0:	4f ef       	ldi	r20, 0xFF	; 255
  b2:	60 e8       	ldi	r22, 0x80	; 128
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	0e 94 b7 00 	call	0x16e	; 0x16e <gpioPinDirection>
			  gpioPinDirection(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,OUTPUT);
  ba:	4f ef       	ldi	r20, 0xFF	; 255
  bc:	60 e2       	ldi	r22, 0x20	; 32
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	0e 94 b7 00 	call	0x16e	; 0x16e <gpioPinDirection>
  c4:	08 95       	ret

000000c6 <MotorDC_Dir>:
	 }
}

void MotorDC_Dir(En_motorType_t en_motor_number, En_motorDir_t en_motor_dir)
{
	 if (en_motor_number==MOT_1)
  c6:	81 11       	cpse	r24, r1
  c8:	27 c0       	rjmp	.+78     	; 0x118 <MotorDC_Dir+0x52>
	 {
		  	switch (en_motor_dir)
  ca:	61 30       	cpi	r22, 0x01	; 1
  cc:	79 f0       	breq	.+30     	; 0xec <MotorDC_Dir+0x26>
  ce:	18 f0       	brcs	.+6      	; 0xd6 <MotorDC_Dir+0x10>
  d0:	62 30       	cpi	r22, 0x02	; 2
  d2:	b9 f0       	breq	.+46     	; 0x102 <MotorDC_Dir+0x3c>
  d4:	08 95       	ret
				{
					 case (STOP):
					 {
						  gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	64 e0       	ldi	r22, 0x04	; 4
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
						  gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	68 e0       	ldi	r22, 0x08	; 8
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
						  break;
  ea:	08 95       	ret
					 }
					 case (FORWARD):
					 {
						 gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
  ec:	4f ef       	ldi	r20, 0xFF	; 255
  ee:	64 e0       	ldi	r22, 0x04	; 4
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
						 gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	68 e0       	ldi	r22, 0x08	; 8
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
						 break;
 100:	08 95       	ret
					 }
					 case (BACKWARD):
					 {
						 gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	64 e0       	ldi	r22, 0x04	; 4
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
						 gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
 10c:	4f ef       	ldi	r20, 0xFF	; 255
 10e:	68 e0       	ldi	r22, 0x08	; 8
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
						 break;
 116:	08 95       	ret
					 
				}
		  }
		  else  //case motor 2
		  {
				switch (en_motor_dir)
 118:	61 30       	cpi	r22, 0x01	; 1
 11a:	79 f0       	breq	.+30     	; 0x13a <MotorDC_Dir+0x74>
 11c:	18 f0       	brcs	.+6      	; 0x124 <MotorDC_Dir+0x5e>
 11e:	62 30       	cpi	r22, 0x02	; 2
 120:	b9 f0       	breq	.+46     	; 0x150 <MotorDC_Dir+0x8a>
 122:	08 95       	ret
				{
					 case (STOP):
					 {
						  gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	60 e4       	ldi	r22, 0x40	; 64
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
						  gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	60 e8       	ldi	r22, 0x80	; 128
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
						  break;
 138:	08 95       	ret
					 }
					 case (FORWARD):
					 {
						  gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
 13a:	4f ef       	ldi	r20, 0xFF	; 255
 13c:	60 e4       	ldi	r22, 0x40	; 64
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
						  gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	60 e8       	ldi	r22, 0x80	; 128
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
						  break;
 14e:	08 95       	ret
					 }
					 case (BACKWARD):
					 {
						  gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	60 e4       	ldi	r22, 0x40	; 64
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
						  gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
 15a:	4f ef       	ldi	r20, 0xFF	; 255
 15c:	60 e8       	ldi	r22, 0x80	; 128
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
 164:	08 95       	ret

00000166 <MotorDC_Speed_PollingWithT0>:
		 }
}

void MotorDC_Speed_PollingWithT0(uint8_t u8_motor_speed)
{
	  timer0SwPWM(u8_motor_speed,T0_FERQ_100);
 166:	64 e6       	ldi	r22, 0x64	; 100
 168:	0e 94 2c 02 	call	0x458	; 0x458 <timer0SwPWM>
 16c:	08 95       	ret

0000016e <gpioPinDirection>:
/* This function determine the direction of a specific Pin or pins by ANDing the PORTx Direction with NOT Pins Mask if the Required Direction is INPUT */
/* and ORing the PORTx Direction with Pins Mask if the Required Direction is OUTPUT */

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
	if( u8_direction == INPUT)
 16e:	41 11       	cpse	r20, r1
 170:	1c c0       	rjmp	.+56     	; 0x1aa <gpioPinDirection+0x3c>
	{
		switch(u8_port)
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	59 f0       	breq	.+22     	; 0x18c <gpioPinDirection+0x1e>
 176:	28 f0       	brcs	.+10     	; 0x182 <gpioPinDirection+0x14>
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	69 f0       	breq	.+26     	; 0x196 <gpioPinDirection+0x28>
 17c:	83 30       	cpi	r24, 0x03	; 3
 17e:	81 f0       	breq	.+32     	; 0x1a0 <gpioPinDirection+0x32>
 180:	08 95       	ret
		{
			case GPIOA: PORTA_DIR &= ~(u8_pins);break;
 182:	8a b3       	in	r24, 0x1a	; 26
 184:	60 95       	com	r22
 186:	68 23       	and	r22, r24
 188:	6a bb       	out	0x1a, r22	; 26
 18a:	08 95       	ret
			case GPIOB: PORTB_DIR &= ~(u8_pins);break;
 18c:	87 b3       	in	r24, 0x17	; 23
 18e:	60 95       	com	r22
 190:	68 23       	and	r22, r24
 192:	67 bb       	out	0x17, r22	; 23
 194:	08 95       	ret
			case GPIOC: PORTC_DIR &= ~(u8_pins);break;
 196:	84 b3       	in	r24, 0x14	; 20
 198:	60 95       	com	r22
 19a:	68 23       	and	r22, r24
 19c:	64 bb       	out	0x14, r22	; 20
 19e:	08 95       	ret
			case GPIOD: PORTD_DIR &= ~(u8_pins);break;
 1a0:	81 b3       	in	r24, 0x11	; 17
 1a2:	60 95       	com	r22
 1a4:	68 23       	and	r22, r24
 1a6:	61 bb       	out	0x11, r22	; 17
 1a8:	08 95       	ret
			default: break;
		}
	}
	
	else if( u8_direction == OUTPUT)
 1aa:	4f 3f       	cpi	r20, 0xFF	; 255
 1ac:	b9 f4       	brne	.+46     	; 0x1dc <gpioPinDirection+0x6e>
	{
		switch(u8_port)
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	51 f0       	breq	.+20     	; 0x1c6 <gpioPinDirection+0x58>
 1b2:	28 f0       	brcs	.+10     	; 0x1be <gpioPinDirection+0x50>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	59 f0       	breq	.+22     	; 0x1ce <gpioPinDirection+0x60>
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	69 f0       	breq	.+26     	; 0x1d6 <gpioPinDirection+0x68>
 1bc:	08 95       	ret
		{
			case GPIOA: PORTA_DIR |= (u8_pins);break;
 1be:	8a b3       	in	r24, 0x1a	; 26
 1c0:	68 2b       	or	r22, r24
 1c2:	6a bb       	out	0x1a, r22	; 26
 1c4:	08 95       	ret
			case GPIOB: PORTB_DIR |= (u8_pins);break;
 1c6:	87 b3       	in	r24, 0x17	; 23
 1c8:	68 2b       	or	r22, r24
 1ca:	67 bb       	out	0x17, r22	; 23
 1cc:	08 95       	ret
			case GPIOC: PORTC_DIR |= (u8_pins);break;
 1ce:	84 b3       	in	r24, 0x14	; 20
 1d0:	68 2b       	or	r22, r24
 1d2:	64 bb       	out	0x14, r22	; 20
 1d4:	08 95       	ret
			case GPIOD: PORTD_DIR |= (u8_pins);break;
 1d6:	81 b3       	in	r24, 0x11	; 17
 1d8:	68 2b       	or	r22, r24
 1da:	61 bb       	out	0x11, r22	; 17
 1dc:	08 95       	ret

000001de <gpioPinWrite>:
/* After that we make sure of the value by ANDing the Pin Mask with the desired value*/
/* Finally ORing PORTx DATA with the value*/
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
	uint8_t temp_reg;
	switch(u8_port)
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	71 f0       	breq	.+28     	; 0x1fe <gpioPinWrite+0x20>
 1e2:	28 f0       	brcs	.+10     	; 0x1ee <gpioPinWrite+0x10>
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	99 f0       	breq	.+38     	; 0x20e <gpioPinWrite+0x30>
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	c9 f0       	breq	.+50     	; 0x21e <gpioPinWrite+0x40>
 1ec:	08 95       	ret
	{
		case GPIOA:
		{
			 temp_reg = PORTA_DATA & ~(u8_pins);
 1ee:	8b b3       	in	r24, 0x1b	; 27
			 u8_value = (u8_pins & u8_value);
			 PORTA_DATA = temp_reg |u8_value ;
 1f0:	96 2f       	mov	r25, r22
 1f2:	90 95       	com	r25
 1f4:	89 23       	and	r24, r25
 1f6:	46 23       	and	r20, r22
 1f8:	48 2b       	or	r20, r24
 1fa:	4b bb       	out	0x1b, r20	; 27
			 break;
 1fc:	08 95       	ret
		}
		case GPIOB:
		{ 
			temp_reg = PORTB_DATA & ~(u8_pins);
 1fe:	88 b3       	in	r24, 0x18	; 24
			u8_value = (u8_pins & u8_value);
			PORTB_DATA = temp_reg | ( u8_value);
 200:	96 2f       	mov	r25, r22
 202:	90 95       	com	r25
 204:	89 23       	and	r24, r25
 206:	46 23       	and	r20, r22
 208:	48 2b       	or	r20, r24
 20a:	48 bb       	out	0x18, r20	; 24
			break;
 20c:	08 95       	ret
		}
		case GPIOC:
		{
			temp_reg = PORTC_DATA & ~(u8_pins);
 20e:	85 b3       	in	r24, 0x15	; 21
			u8_value = (u8_pins & u8_value);
			PORTC_DATA = temp_reg | ( u8_value);
 210:	96 2f       	mov	r25, r22
 212:	90 95       	com	r25
 214:	89 23       	and	r24, r25
 216:	46 23       	and	r20, r22
 218:	48 2b       	or	r20, r24
 21a:	45 bb       	out	0x15, r20	; 21
			break;
 21c:	08 95       	ret
		}
		case GPIOD:
		{
			temp_reg = PORTD_DATA & ~(u8_pins);
 21e:	82 b3       	in	r24, 0x12	; 18
			u8_value =(u8_pins & u8_value);
			PORTD_DATA = temp_reg | (u8_value);
 220:	96 2f       	mov	r25, r22
 222:	90 95       	com	r25
 224:	89 23       	and	r24, r25
 226:	46 23       	and	r20, r22
 228:	48 2b       	or	r20, r24
 22a:	42 bb       	out	0x12, r20	; 18
 22c:	08 95       	ret

0000022e <Led_Init>:
#include "gpio.h"
/* This function is used to configure the direction of the led Pins as OUTPUT*/
/* Based on gpioPinDirection function */
void Led_Init(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	61 f0       	breq	.+24     	; 0x24a <Led_Init+0x1c>
 232:	28 f0       	brcs	.+10     	; 0x23e <Led_Init+0x10>
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	79 f0       	breq	.+30     	; 0x256 <Led_Init+0x28>
 238:	83 30       	cpi	r24, 0x03	; 3
 23a:	99 f0       	breq	.+38     	; 0x262 <Led_Init+0x34>
 23c:	08 95       	ret
	{
		case LED_0:
		{
			gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
 23e:	4f ef       	ldi	r20, 0xFF	; 255
 240:	60 e1       	ldi	r22, 0x10	; 16
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 b7 00 	call	0x16e	; 0x16e <gpioPinDirection>
			break;
 248:	08 95       	ret
		}
		case LED_1:
		{
			gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
 24a:	4f ef       	ldi	r20, 0xFF	; 255
 24c:	60 e2       	ldi	r22, 0x20	; 32
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 b7 00 	call	0x16e	; 0x16e <gpioPinDirection>
			break;
 254:	08 95       	ret
		}
		case LED_2:
		{
			gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
 256:	4f ef       	ldi	r20, 0xFF	; 255
 258:	60 e4       	ldi	r22, 0x40	; 64
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 b7 00 	call	0x16e	; 0x16e <gpioPinDirection>
			break;
 260:	08 95       	ret
		}
		case LED_3:
		{
			gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
 262:	4f ef       	ldi	r20, 0xFF	; 255
 264:	60 e8       	ldi	r22, 0x80	; 128
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 b7 00 	call	0x16e	; 0x16e <gpioPinDirection>
 26c:	08 95       	ret

0000026e <__vector_11>:
#include "softwareDelay.h"
#include "dcMotor.h"
#include "led.h"

ISR(TIMER0_OVF_vect)
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	cf 92       	push	r12
 27a:	df 92       	push	r13
 27c:	ef 92       	push	r14
 27e:	ff 92       	push	r15
 280:	2f 93       	push	r18
 282:	3f 93       	push	r19
 284:	4f 93       	push	r20
 286:	5f 93       	push	r21
 288:	6f 93       	push	r22
 28a:	7f 93       	push	r23
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
 294:	ef 93       	push	r30
 296:	ff 93       	push	r31
	
	
	if((ov_counts ) == (Gu8_dutyCycle)) ////
 298:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <Gu8_dutyCycle>
 29c:	c0 90 66 00 	lds	r12, 0x0066	; 0x800066 <ov_counts>
 2a0:	d0 90 67 00 	lds	r13, 0x0067	; 0x800067 <ov_counts+0x1>
 2a4:	e0 90 68 00 	lds	r14, 0x0068	; 0x800068 <ov_counts+0x2>
 2a8:	f0 90 69 00 	lds	r15, 0x0069	; 0x800069 <ov_counts+0x3>
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__floatsisf>
 2b6:	a7 01       	movw	r20, r14
 2b8:	96 01       	movw	r18, r12
 2ba:	0e 94 4c 03 	call	0x698	; 0x698 <__cmpsf2>
 2be:	81 11       	cpse	r24, r1
 2c0:	0b c0       	rjmp	.+22     	; 0x2d8 <__vector_11+0x6a>
	{
		gpioPinWrite(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,LOW) ;
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	60 e1       	ldi	r22, 0x10	; 16
 2c6:	83 e0       	ldi	r24, 0x03	; 3
 2c8:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
		gpioPinWrite(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,LOW) ;
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	60 e2       	ldi	r22, 0x20	; 32
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
 2d6:	22 c0       	rjmp	.+68     	; 0x31c <__vector_11+0xae>
	}
	else if(ov_counts ==100)
 2d8:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ov_counts>
 2dc:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ov_counts+0x1>
 2e0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ov_counts+0x2>
 2e4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ov_counts+0x3>
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	48 ec       	ldi	r20, 0xC8	; 200
 2ee:	52 e4       	ldi	r21, 0x42	; 66
 2f0:	0e 94 4c 03 	call	0x698	; 0x698 <__cmpsf2>
 2f4:	81 11       	cpse	r24, r1
 2f6:	12 c0       	rjmp	.+36     	; 0x31c <__vector_11+0xae>
	{
		ov_counts=0;
 2f8:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <ov_counts>
 2fc:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <ov_counts+0x1>
 300:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <ov_counts+0x2>
 304:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <ov_counts+0x3>
		gpioPinWrite(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,HIGH) ;
 308:	4f ef       	ldi	r20, 0xFF	; 255
 30a:	60 e1       	ldi	r22, 0x10	; 16
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
		gpioPinWrite(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,HIGH) ;
 312:	4f ef       	ldi	r20, 0xFF	; 255
 314:	60 e2       	ldi	r22, 0x20	; 32
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	0e 94 ef 00 	call	0x1de	; 0x1de <gpioPinWrite>
	}
	ov_counts++;
 31c:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ov_counts>
 320:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ov_counts+0x1>
 324:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ov_counts+0x2>
 328:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ov_counts+0x3>
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	40 e8       	ldi	r20, 0x80	; 128
 332:	5f e3       	ldi	r21, 0x3F	; 63
 334:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__addsf3>
 338:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <ov_counts>
 33c:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <ov_counts+0x1>
 340:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <ov_counts+0x2>
 344:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <ov_counts+0x3>
	TCNT0=Timer_initial_value;
 348:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Timer_initial_value>
 34c:	82 bf       	out	0x32, r24	; 50
}
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	bf 91       	pop	r27
 354:	af 91       	pop	r26
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	7f 91       	pop	r23
 35c:	6f 91       	pop	r22
 35e:	5f 91       	pop	r21
 360:	4f 91       	pop	r20
 362:	3f 91       	pop	r19
 364:	2f 91       	pop	r18
 366:	ff 90       	pop	r15
 368:	ef 90       	pop	r14
 36a:	df 90       	pop	r13
 36c:	cf 90       	pop	r12
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <main>:


int main(void)
{
 378:	cf 92       	push	r12
 37a:	ef 92       	push	r14
 37c:	0f 93       	push	r16
 37e:	cf 93       	push	r28
	 sei();
 380:	78 94       	sei
	 Led_Init(LED_0);
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 17 01 	call	0x22e	; 0x22e <Led_Init>
	 uint8_t i=0;
	 MotorDC_Init(MOT_1);
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 3e 00 	call	0x7c	; 0x7c <MotorDC_Init>
	 MotorDC_Init(MOT_2);
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 3e 00 	call	0x7c	; 0x7c <MotorDC_Init>
	 uint8_t count=0;
	 timer2Init(T2_NORMAL_MODE,T2_OC2_DIS,T2_PRESCALER_8,0, 0, 0,T2_POLLING);
 394:	c1 2c       	mov	r12, r1
 396:	e1 2c       	mov	r14, r1
 398:	00 e0       	ldi	r16, 0x00	; 0
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	42 e0       	ldi	r20, 0x02	; 2
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 9e 02 	call	0x53c	; 0x53c <timer2Init>
// 		  Led_On(LED_0);
// 		  timer2DelayMs(1);
// 		  Led_Off(LED_0);
// 		  timer2DelayMs(1);
				
				MotorDC_Dir(MOT_1, FORWARD);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 63 00 	call	0xc6	; 0xc6 <MotorDC_Dir>
				MotorDC_Dir(MOT_2, FORWARD);
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 63 00 	call	0xc6	; 0xc6 <MotorDC_Dir>
	 sei();
	 Led_Init(LED_0);
	 uint8_t i=0;
	 MotorDC_Init(MOT_1);
	 MotorDC_Init(MOT_2);
	 uint8_t count=0;
 3b6:	c0 e0       	ldi	r28, 0x00	; 0
				
				MotorDC_Dir(MOT_1, FORWARD);
				MotorDC_Dir(MOT_2, FORWARD);
				for (i=1;i<=5;i++)
				{
				 MotorDC_Speed_PollingWithT0(count);
 3b8:	8c 2f       	mov	r24, r28
 3ba:	0e 94 b3 00 	call	0x166	; 0x166 <MotorDC_Speed_PollingWithT0>
				 timer2DelayMs(1000);
 3be:	88 ee       	ldi	r24, 0xE8	; 232
 3c0:	93 e0       	ldi	r25, 0x03	; 3
 3c2:	0e 94 bf 02 	call	0x57e	; 0x57e <timer2DelayMs>
				 count+=20;
 3c6:	cc 5e       	subi	r28, 0xEC	; 236
// 		  Led_Off(LED_0);
// 		  timer2DelayMs(1);
				
				MotorDC_Dir(MOT_1, FORWARD);
				MotorDC_Dir(MOT_2, FORWARD);
				for (i=1;i<=5;i++)
 3c8:	c4 36       	cpi	r28, 0x64	; 100
 3ca:	b1 f7       	brne	.-20     	; 0x3b8 <main+0x40>
				 timer2DelayMs(1000);
				 count+=20;
				}
			  for (i=1;i<=5;i++)
			  {
				  MotorDC_Speed_PollingWithT0(count);
 3cc:	8c 2f       	mov	r24, r28
 3ce:	0e 94 b3 00 	call	0x166	; 0x166 <MotorDC_Speed_PollingWithT0>
				  timer2DelayMs(1000);
 3d2:	88 ee       	ldi	r24, 0xE8	; 232
 3d4:	93 e0       	ldi	r25, 0x03	; 3
 3d6:	0e 94 bf 02 	call	0x57e	; 0x57e <timer2DelayMs>
				  count-=20;
 3da:	c4 51       	subi	r28, 0x14	; 20
				{
				 MotorDC_Speed_PollingWithT0(count);
				 timer2DelayMs(1000);
				 count+=20;
				}
			  for (i=1;i<=5;i++)
 3dc:	b9 f7       	brne	.-18     	; 0x3cc <main+0x54>
			  {
				  MotorDC_Speed_PollingWithT0(count);
				  timer2DelayMs(1000);
				  count-=20;
			  }
			  	MotorDC_Dir(MOT_1, STOP);
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 63 00 	call	0xc6	; 0xc6 <MotorDC_Dir>
			  	MotorDC_Dir(MOT_2, STOP);
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 63 00 	call	0xc6	; 0xc6 <MotorDC_Dir>
			   timer2DelayMs(1000);
 3ee:	88 ee       	ldi	r24, 0xE8	; 232
 3f0:	93 e0       	ldi	r25, 0x03	; 3
 3f2:	0e 94 bf 02 	call	0x57e	; 0x57e <timer2DelayMs>
				MotorDC_Dir(MOT_1, FORWARD);
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 63 00 	call	0xc6	; 0xc6 <MotorDC_Dir>
				MotorDC_Dir(MOT_2, STOP);
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 63 00 	call	0xc6	; 0xc6 <MotorDC_Dir>
				MotorDC_Speed_PollingWithT0(30);
 406:	8e e1       	ldi	r24, 0x1E	; 30
 408:	0e 94 b3 00 	call	0x166	; 0x166 <MotorDC_Speed_PollingWithT0>
				timer2DelayMs(500);
 40c:	84 ef       	ldi	r24, 0xF4	; 244
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 bf 02 	call	0x57e	; 0x57e <timer2DelayMs>
// 				

		  
		  
    }
}
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	cf 91       	pop	r28
 41a:	0f 91       	pop	r16
 41c:	ef 90       	pop	r14
 41e:	cf 90       	pop	r12
 420:	08 95       	ret

00000422 <timer0Init>:
	ASSR|=u8_assynchronous;
}

void timer2Set(uint8_t u8_a_value)
{
	 TCNT2=u8_a_value; 
 422:	ef 92       	push	r14
 424:	0f 93       	push	r16
 426:	93 b7       	in	r25, 0x33	; 51
 428:	90 68       	ori	r25, 0x80	; 128
 42a:	93 bf       	out	0x33, r25	; 51
 42c:	93 b7       	in	r25, 0x33	; 51
 42e:	89 2b       	or	r24, r25
 430:	83 bf       	out	0x33, r24	; 51
 432:	83 b7       	in	r24, 0x33	; 51
 434:	68 2b       	or	r22, r24
 436:	63 bf       	out	0x33, r22	; 51
 438:	40 93 65 00 	sts	0x0065, r20	; 0x800065 <prescal>
 43c:	22 bf       	out	0x32, r18	; 50
 43e:	0c bf       	out	0x3c, r16	; 60
 440:	89 b7       	in	r24, 0x39	; 57
 442:	e8 2a       	or	r14, r24
 444:	e9 be       	out	0x39, r14	; 57
 446:	0f 91       	pop	r16
 448:	ef 90       	pop	r14
 44a:	08 95       	ret

0000044c <timer0Start>:
 44c:	93 b7       	in	r25, 0x33	; 51
 44e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <prescal>
 452:	89 2b       	or	r24, r25
 454:	83 bf       	out	0x33, r24	; 51
 456:	08 95       	ret

00000458 <timer0SwPWM>:
 458:	ef 92       	push	r14
 45a:	0f 93       	push	r16
 45c:	84 36       	cpi	r24, 0x64	; 100
 45e:	21 f0       	breq	.+8      	; 0x468 <timer0SwPWM+0x10>
 460:	81 11       	cpse	r24, r1
 462:	03 c0       	rjmp	.+6      	; 0x46a <timer0SwPWM+0x12>
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	01 c0       	rjmp	.+2      	; 0x46a <timer0SwPWM+0x12>
 468:	83 e6       	ldi	r24, 0x63	; 99
 46a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Gu8_dutyCycle>
 46e:	64 36       	cpi	r22, 0x64	; 100
 470:	89 f0       	breq	.+34     	; 0x494 <timer0SwPWM+0x3c>
 472:	68 3c       	cpi	r22, 0xC8	; 200
 474:	e1 f0       	breq	.+56     	; 0x4ae <timer0SwPWM+0x56>
 476:	62 33       	cpi	r22, 0x32	; 50
 478:	31 f5       	brne	.+76     	; 0x4c6 <timer0SwPWM+0x6e>
 47a:	8a e0       	ldi	r24, 0x0A	; 10
 47c:	97 ed       	ldi	r25, 0xD7	; 215
 47e:	a3 ea       	ldi	r26, 0xA3	; 163
 480:	bc e3       	ldi	r27, 0x3C	; 60
 482:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <pwm_period>
 486:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <pwm_period+0x1>
 48a:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <pwm_period+0x2>
 48e:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <pwm_period+0x3>
 492:	19 c0       	rjmp	.+50     	; 0x4c6 <timer0SwPWM+0x6e>
 494:	8a e0       	ldi	r24, 0x0A	; 10
 496:	97 ed       	ldi	r25, 0xD7	; 215
 498:	a3 e2       	ldi	r26, 0x23	; 35
 49a:	bc e3       	ldi	r27, 0x3C	; 60
 49c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <pwm_period>
 4a0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <pwm_period+0x1>
 4a4:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <pwm_period+0x2>
 4a8:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <pwm_period+0x3>
 4ac:	0c c0       	rjmp	.+24     	; 0x4c6 <timer0SwPWM+0x6e>
 4ae:	8a e0       	ldi	r24, 0x0A	; 10
 4b0:	97 ed       	ldi	r25, 0xD7	; 215
 4b2:	a3 ea       	ldi	r26, 0xA3	; 163
 4b4:	bb e3       	ldi	r27, 0x3B	; 59
 4b6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <pwm_period>
 4ba:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <pwm_period+0x1>
 4be:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <pwm_period+0x2>
 4c2:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <pwm_period+0x3>
 4c6:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <pwm_period>
 4ca:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <pwm_period+0x1>
 4ce:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <pwm_period+0x2>
 4d2:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <pwm_period+0x3>
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	48 ec       	ldi	r20, 0xC8	; 200
 4dc:	52 e4       	ldi	r21, 0x42	; 66
 4de:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__divsf3>
 4e2:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <interrupt_OV_time>
 4e6:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <interrupt_OV_time+0x1>
 4ea:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <interrupt_OV_time+0x2>
 4ee:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <interrupt_OV_time+0x3>
 4f2:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <interrupt_OV_time>
 4f6:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <interrupt_OV_time+0x1>
 4fa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <interrupt_OV_time+0x2>
 4fe:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <interrupt_OV_time+0x3>
 502:	2d eb       	ldi	r18, 0xBD	; 189
 504:	37 e3       	ldi	r19, 0x37	; 55
 506:	46 e0       	ldi	r20, 0x06	; 6
 508:	55 e3       	ldi	r21, 0x35	; 53
 50a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__divsf3>
 50e:	0e 94 c3 03 	call	0x786	; 0x786 <__fixunssfsi>
 512:	61 95       	neg	r22
 514:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <Timer_initial_value>
 518:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <Timer_initial_value>
 51c:	ee 24       	eor	r14, r14
 51e:	e3 94       	inc	r14
 520:	00 e0       	ldi	r16, 0x00	; 0
 522:	42 e0       	ldi	r20, 0x02	; 2
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0e 94 11 02 	call	0x422	; 0x422 <timer0Init>
 52c:	0e 94 26 02 	call	0x44c	; 0x44c <timer0Start>
 530:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Timer_initial_value>
 534:	82 bf       	out	0x32, r24	; 50
 536:	0f 91       	pop	r16
 538:	ef 90       	pop	r14
 53a:	08 95       	ret

0000053c <timer2Init>:
 53c:	cf 92       	push	r12
 53e:	ef 92       	push	r14
 540:	0f 93       	push	r16
 542:	95 b5       	in	r25, 0x25	; 37
 544:	89 2b       	or	r24, r25
 546:	85 bd       	out	0x25, r24	; 37
 548:	85 b5       	in	r24, 0x25	; 37
 54a:	68 2b       	or	r22, r24
 54c:	65 bd       	out	0x25, r22	; 37
 54e:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <_edata>
 552:	24 bd       	out	0x24, r18	; 36
 554:	03 bd       	out	0x23, r16	; 35
 556:	89 b7       	in	r24, 0x39	; 57
 558:	c8 2a       	or	r12, r24
 55a:	c9 be       	out	0x39, r12	; 57
 55c:	82 b5       	in	r24, 0x22	; 34
 55e:	e8 2a       	or	r14, r24
 560:	e2 bc       	out	0x22, r14	; 34
 562:	0f 91       	pop	r16
 564:	ef 90       	pop	r14
 566:	cf 90       	pop	r12
 568:	08 95       	ret

0000056a <timer2Start>:
	 
}
void timer2Start(void)
{
	 TCCR2|=Timer2Prescaller;
 56a:	95 b5       	in	r25, 0x25	; 37
 56c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 570:	89 2b       	or	r24, r25
 572:	85 bd       	out	0x25, r24	; 37
 574:	08 95       	ret

00000576 <timer2Stop>:
	 
}
void timer2Stop(void)
{
	 TCCR2&=~(0x07);
 576:	85 b5       	in	r24, 0x25	; 37
 578:	88 7f       	andi	r24, 0xF8	; 248
 57a:	85 bd       	out	0x25, r24	; 37
 57c:	08 95       	ret

0000057e <timer2DelayMs>:
	 
}

void timer2DelayMs(uint16_t u16_delay_in_ms)
{
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	ec 01       	movw	r28, r24
		 timer2_delay.timer_init_value=48;//12 count more
		 break;
		 default:
		 break;
	 }
	 timer2Start();
 584:	0e 94 b5 02 	call	0x56a	; 0x56a <timer2Start>
	 for (i=0;i<u16_delay_in_ms;i++)
 588:	20 97       	sbiw	r28, 0x00	; 0
 58a:	a1 f0       	breq	.+40     	; 0x5b4 <timer2DelayMs+0x36>
 58c:	40 e0       	ldi	r20, 0x00	; 0
 58e:	50 e0       	ldi	r21, 0x00	; 0
	 {
		 TCNT2=timer2_delay.timer_init_value;
 590:	90 e3       	ldi	r25, 0x30	; 48
 592:	94 bd       	out	0x24, r25	; 36
 594:	28 e0       	ldi	r18, 0x08	; 8
 596:	30 e0       	ldi	r19, 0x00	; 0
		 for( j=0;j<=timer2_delay.OV_count;j++)
		 {
			 //while((TIFR>>TOV2)&1==0);
			 while(((TIFR >>6)&1)!=1);
 598:	08 b6       	in	r0, 0x38	; 56
 59a:	06 fe       	sbrs	r0, 6
 59c:	fd cf       	rjmp	.-6      	; 0x598 <timer2DelayMs+0x1a>
			 TIFR|=0x40;
 59e:	88 b7       	in	r24, 0x38	; 56
 5a0:	80 64       	ori	r24, 0x40	; 64
 5a2:	88 bf       	out	0x38, r24	; 56
 5a4:	21 50       	subi	r18, 0x01	; 1
 5a6:	31 09       	sbc	r19, r1
	 }
	 timer2Start();
	 for (i=0;i<u16_delay_in_ms;i++)
	 {
		 TCNT2=timer2_delay.timer_init_value;
		 for( j=0;j<=timer2_delay.OV_count;j++)
 5a8:	b9 f7       	brne	.-18     	; 0x598 <timer2DelayMs+0x1a>
		 break;
		 default:
		 break;
	 }
	 timer2Start();
	 for (i=0;i<u16_delay_in_ms;i++)
 5aa:	4f 5f       	subi	r20, 0xFF	; 255
 5ac:	5f 4f       	sbci	r21, 0xFF	; 255
 5ae:	c4 17       	cp	r28, r20
 5b0:	d5 07       	cpc	r29, r21
 5b2:	79 f7       	brne	.-34     	; 0x592 <timer2DelayMs+0x14>
			 //while((TIFR>>TOV2)&1==0);
			 while(((TIFR >>6)&1)!=1);
			 TIFR|=0x40;
		 }
	 }
	 timer2Stop();
 5b4:	0e 94 bb 02 	call	0x576	; 0x576 <timer2Stop>
	 
}
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	08 95       	ret

000005be <__subsf3>:
 5be:	50 58       	subi	r21, 0x80	; 128

000005c0 <__addsf3>:
 5c0:	bb 27       	eor	r27, r27
 5c2:	aa 27       	eor	r26, r26
 5c4:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__addsf3x>
 5c8:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__fp_round>
 5cc:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__fp_pscA>
 5d0:	38 f0       	brcs	.+14     	; 0x5e0 <__addsf3+0x20>
 5d2:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_pscB>
 5d6:	20 f0       	brcs	.+8      	; 0x5e0 <__addsf3+0x20>
 5d8:	39 f4       	brne	.+14     	; 0x5e8 <__addsf3+0x28>
 5da:	9f 3f       	cpi	r25, 0xFF	; 255
 5dc:	19 f4       	brne	.+6      	; 0x5e4 <__addsf3+0x24>
 5de:	26 f4       	brtc	.+8      	; 0x5e8 <__addsf3+0x28>
 5e0:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__fp_nan>
 5e4:	0e f4       	brtc	.+2      	; 0x5e8 <__addsf3+0x28>
 5e6:	e0 95       	com	r30
 5e8:	e7 fb       	bst	r30, 7
 5ea:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_inf>

000005ee <__addsf3x>:
 5ee:	e9 2f       	mov	r30, r25
 5f0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fp_split3>
 5f4:	58 f3       	brcs	.-42     	; 0x5cc <__addsf3+0xc>
 5f6:	ba 17       	cp	r27, r26
 5f8:	62 07       	cpc	r22, r18
 5fa:	73 07       	cpc	r23, r19
 5fc:	84 07       	cpc	r24, r20
 5fe:	95 07       	cpc	r25, r21
 600:	20 f0       	brcs	.+8      	; 0x60a <__addsf3x+0x1c>
 602:	79 f4       	brne	.+30     	; 0x622 <__addsf3x+0x34>
 604:	a6 f5       	brtc	.+104    	; 0x66e <__addsf3x+0x80>
 606:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__fp_zero>
 60a:	0e f4       	brtc	.+2      	; 0x60e <__addsf3x+0x20>
 60c:	e0 95       	com	r30
 60e:	0b 2e       	mov	r0, r27
 610:	ba 2f       	mov	r27, r26
 612:	a0 2d       	mov	r26, r0
 614:	0b 01       	movw	r0, r22
 616:	b9 01       	movw	r22, r18
 618:	90 01       	movw	r18, r0
 61a:	0c 01       	movw	r0, r24
 61c:	ca 01       	movw	r24, r20
 61e:	a0 01       	movw	r20, r0
 620:	11 24       	eor	r1, r1
 622:	ff 27       	eor	r31, r31
 624:	59 1b       	sub	r21, r25
 626:	99 f0       	breq	.+38     	; 0x64e <__addsf3x+0x60>
 628:	59 3f       	cpi	r21, 0xF9	; 249
 62a:	50 f4       	brcc	.+20     	; 0x640 <__addsf3x+0x52>
 62c:	50 3e       	cpi	r21, 0xE0	; 224
 62e:	68 f1       	brcs	.+90     	; 0x68a <__addsf3x+0x9c>
 630:	1a 16       	cp	r1, r26
 632:	f0 40       	sbci	r31, 0x00	; 0
 634:	a2 2f       	mov	r26, r18
 636:	23 2f       	mov	r18, r19
 638:	34 2f       	mov	r19, r20
 63a:	44 27       	eor	r20, r20
 63c:	58 5f       	subi	r21, 0xF8	; 248
 63e:	f3 cf       	rjmp	.-26     	; 0x626 <__addsf3x+0x38>
 640:	46 95       	lsr	r20
 642:	37 95       	ror	r19
 644:	27 95       	ror	r18
 646:	a7 95       	ror	r26
 648:	f0 40       	sbci	r31, 0x00	; 0
 64a:	53 95       	inc	r21
 64c:	c9 f7       	brne	.-14     	; 0x640 <__addsf3x+0x52>
 64e:	7e f4       	brtc	.+30     	; 0x66e <__addsf3x+0x80>
 650:	1f 16       	cp	r1, r31
 652:	ba 0b       	sbc	r27, r26
 654:	62 0b       	sbc	r22, r18
 656:	73 0b       	sbc	r23, r19
 658:	84 0b       	sbc	r24, r20
 65a:	ba f0       	brmi	.+46     	; 0x68a <__addsf3x+0x9c>
 65c:	91 50       	subi	r25, 0x01	; 1
 65e:	a1 f0       	breq	.+40     	; 0x688 <__addsf3x+0x9a>
 660:	ff 0f       	add	r31, r31
 662:	bb 1f       	adc	r27, r27
 664:	66 1f       	adc	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	c2 f7       	brpl	.-16     	; 0x65c <__addsf3x+0x6e>
 66c:	0e c0       	rjmp	.+28     	; 0x68a <__addsf3x+0x9c>
 66e:	ba 0f       	add	r27, r26
 670:	62 1f       	adc	r22, r18
 672:	73 1f       	adc	r23, r19
 674:	84 1f       	adc	r24, r20
 676:	48 f4       	brcc	.+18     	; 0x68a <__addsf3x+0x9c>
 678:	87 95       	ror	r24
 67a:	77 95       	ror	r23
 67c:	67 95       	ror	r22
 67e:	b7 95       	ror	r27
 680:	f7 95       	ror	r31
 682:	9e 3f       	cpi	r25, 0xFE	; 254
 684:	08 f0       	brcs	.+2      	; 0x688 <__addsf3x+0x9a>
 686:	b0 cf       	rjmp	.-160    	; 0x5e8 <__addsf3+0x28>
 688:	93 95       	inc	r25
 68a:	88 0f       	add	r24, r24
 68c:	08 f0       	brcs	.+2      	; 0x690 <__addsf3x+0xa2>
 68e:	99 27       	eor	r25, r25
 690:	ee 0f       	add	r30, r30
 692:	97 95       	ror	r25
 694:	87 95       	ror	r24
 696:	08 95       	ret

00000698 <__cmpsf2>:
 698:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_cmp>
 69c:	08 f4       	brcc	.+2      	; 0x6a0 <__cmpsf2+0x8>
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	08 95       	ret

000006a2 <__divsf3>:
 6a2:	0e 94 65 03 	call	0x6ca	; 0x6ca <__divsf3x>
 6a6:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__fp_round>
 6aa:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_pscB>
 6ae:	58 f0       	brcs	.+22     	; 0x6c6 <__divsf3+0x24>
 6b0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__fp_pscA>
 6b4:	40 f0       	brcs	.+16     	; 0x6c6 <__divsf3+0x24>
 6b6:	29 f4       	brne	.+10     	; 0x6c2 <__divsf3+0x20>
 6b8:	5f 3f       	cpi	r21, 0xFF	; 255
 6ba:	29 f0       	breq	.+10     	; 0x6c6 <__divsf3+0x24>
 6bc:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_inf>
 6c0:	51 11       	cpse	r21, r1
 6c2:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_szero>
 6c6:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__fp_nan>

000006ca <__divsf3x>:
 6ca:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fp_split3>
 6ce:	68 f3       	brcs	.-38     	; 0x6aa <__divsf3+0x8>

000006d0 <__divsf3_pse>:
 6d0:	99 23       	and	r25, r25
 6d2:	b1 f3       	breq	.-20     	; 0x6c0 <__divsf3+0x1e>
 6d4:	55 23       	and	r21, r21
 6d6:	91 f3       	breq	.-28     	; 0x6bc <__divsf3+0x1a>
 6d8:	95 1b       	sub	r25, r21
 6da:	55 0b       	sbc	r21, r21
 6dc:	bb 27       	eor	r27, r27
 6de:	aa 27       	eor	r26, r26
 6e0:	62 17       	cp	r22, r18
 6e2:	73 07       	cpc	r23, r19
 6e4:	84 07       	cpc	r24, r20
 6e6:	38 f0       	brcs	.+14     	; 0x6f6 <__divsf3_pse+0x26>
 6e8:	9f 5f       	subi	r25, 0xFF	; 255
 6ea:	5f 4f       	sbci	r21, 0xFF	; 255
 6ec:	22 0f       	add	r18, r18
 6ee:	33 1f       	adc	r19, r19
 6f0:	44 1f       	adc	r20, r20
 6f2:	aa 1f       	adc	r26, r26
 6f4:	a9 f3       	breq	.-22     	; 0x6e0 <__divsf3_pse+0x10>
 6f6:	35 d0       	rcall	.+106    	; 0x762 <__divsf3_pse+0x92>
 6f8:	0e 2e       	mov	r0, r30
 6fa:	3a f0       	brmi	.+14     	; 0x70a <__divsf3_pse+0x3a>
 6fc:	e0 e8       	ldi	r30, 0x80	; 128
 6fe:	32 d0       	rcall	.+100    	; 0x764 <__divsf3_pse+0x94>
 700:	91 50       	subi	r25, 0x01	; 1
 702:	50 40       	sbci	r21, 0x00	; 0
 704:	e6 95       	lsr	r30
 706:	00 1c       	adc	r0, r0
 708:	ca f7       	brpl	.-14     	; 0x6fc <__divsf3_pse+0x2c>
 70a:	2b d0       	rcall	.+86     	; 0x762 <__divsf3_pse+0x92>
 70c:	fe 2f       	mov	r31, r30
 70e:	29 d0       	rcall	.+82     	; 0x762 <__divsf3_pse+0x92>
 710:	66 0f       	add	r22, r22
 712:	77 1f       	adc	r23, r23
 714:	88 1f       	adc	r24, r24
 716:	bb 1f       	adc	r27, r27
 718:	26 17       	cp	r18, r22
 71a:	37 07       	cpc	r19, r23
 71c:	48 07       	cpc	r20, r24
 71e:	ab 07       	cpc	r26, r27
 720:	b0 e8       	ldi	r27, 0x80	; 128
 722:	09 f0       	breq	.+2      	; 0x726 <__divsf3_pse+0x56>
 724:	bb 0b       	sbc	r27, r27
 726:	80 2d       	mov	r24, r0
 728:	bf 01       	movw	r22, r30
 72a:	ff 27       	eor	r31, r31
 72c:	93 58       	subi	r25, 0x83	; 131
 72e:	5f 4f       	sbci	r21, 0xFF	; 255
 730:	3a f0       	brmi	.+14     	; 0x740 <__divsf3_pse+0x70>
 732:	9e 3f       	cpi	r25, 0xFE	; 254
 734:	51 05       	cpc	r21, r1
 736:	78 f0       	brcs	.+30     	; 0x756 <__divsf3_pse+0x86>
 738:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_inf>
 73c:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_szero>
 740:	5f 3f       	cpi	r21, 0xFF	; 255
 742:	e4 f3       	brlt	.-8      	; 0x73c <__divsf3_pse+0x6c>
 744:	98 3e       	cpi	r25, 0xE8	; 232
 746:	d4 f3       	brlt	.-12     	; 0x73c <__divsf3_pse+0x6c>
 748:	86 95       	lsr	r24
 74a:	77 95       	ror	r23
 74c:	67 95       	ror	r22
 74e:	b7 95       	ror	r27
 750:	f7 95       	ror	r31
 752:	9f 5f       	subi	r25, 0xFF	; 255
 754:	c9 f7       	brne	.-14     	; 0x748 <__divsf3_pse+0x78>
 756:	88 0f       	add	r24, r24
 758:	91 1d       	adc	r25, r1
 75a:	96 95       	lsr	r25
 75c:	87 95       	ror	r24
 75e:	97 f9       	bld	r25, 7
 760:	08 95       	ret
 762:	e1 e0       	ldi	r30, 0x01	; 1
 764:	66 0f       	add	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	88 1f       	adc	r24, r24
 76a:	bb 1f       	adc	r27, r27
 76c:	62 17       	cp	r22, r18
 76e:	73 07       	cpc	r23, r19
 770:	84 07       	cpc	r24, r20
 772:	ba 07       	cpc	r27, r26
 774:	20 f0       	brcs	.+8      	; 0x77e <__divsf3_pse+0xae>
 776:	62 1b       	sub	r22, r18
 778:	73 0b       	sbc	r23, r19
 77a:	84 0b       	sbc	r24, r20
 77c:	ba 0b       	sbc	r27, r26
 77e:	ee 1f       	adc	r30, r30
 780:	88 f7       	brcc	.-30     	; 0x764 <__divsf3_pse+0x94>
 782:	e0 95       	com	r30
 784:	08 95       	ret

00000786 <__fixunssfsi>:
 786:	0e 94 83 04 	call	0x906	; 0x906 <__fp_splitA>
 78a:	88 f0       	brcs	.+34     	; 0x7ae <__fixunssfsi+0x28>
 78c:	9f 57       	subi	r25, 0x7F	; 127
 78e:	98 f0       	brcs	.+38     	; 0x7b6 <__fixunssfsi+0x30>
 790:	b9 2f       	mov	r27, r25
 792:	99 27       	eor	r25, r25
 794:	b7 51       	subi	r27, 0x17	; 23
 796:	b0 f0       	brcs	.+44     	; 0x7c4 <__fixunssfsi+0x3e>
 798:	e1 f0       	breq	.+56     	; 0x7d2 <__fixunssfsi+0x4c>
 79a:	66 0f       	add	r22, r22
 79c:	77 1f       	adc	r23, r23
 79e:	88 1f       	adc	r24, r24
 7a0:	99 1f       	adc	r25, r25
 7a2:	1a f0       	brmi	.+6      	; 0x7aa <__fixunssfsi+0x24>
 7a4:	ba 95       	dec	r27
 7a6:	c9 f7       	brne	.-14     	; 0x79a <__fixunssfsi+0x14>
 7a8:	14 c0       	rjmp	.+40     	; 0x7d2 <__fixunssfsi+0x4c>
 7aa:	b1 30       	cpi	r27, 0x01	; 1
 7ac:	91 f0       	breq	.+36     	; 0x7d2 <__fixunssfsi+0x4c>
 7ae:	0e 94 9d 04 	call	0x93a	; 0x93a <__fp_zero>
 7b2:	b1 e0       	ldi	r27, 0x01	; 1
 7b4:	08 95       	ret
 7b6:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__fp_zero>
 7ba:	67 2f       	mov	r22, r23
 7bc:	78 2f       	mov	r23, r24
 7be:	88 27       	eor	r24, r24
 7c0:	b8 5f       	subi	r27, 0xF8	; 248
 7c2:	39 f0       	breq	.+14     	; 0x7d2 <__fixunssfsi+0x4c>
 7c4:	b9 3f       	cpi	r27, 0xF9	; 249
 7c6:	cc f3       	brlt	.-14     	; 0x7ba <__fixunssfsi+0x34>
 7c8:	86 95       	lsr	r24
 7ca:	77 95       	ror	r23
 7cc:	67 95       	ror	r22
 7ce:	b3 95       	inc	r27
 7d0:	d9 f7       	brne	.-10     	; 0x7c8 <__fixunssfsi+0x42>
 7d2:	3e f4       	brtc	.+14     	; 0x7e2 <__fixunssfsi+0x5c>
 7d4:	90 95       	com	r25
 7d6:	80 95       	com	r24
 7d8:	70 95       	com	r23
 7da:	61 95       	neg	r22
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255
 7de:	8f 4f       	sbci	r24, 0xFF	; 255
 7e0:	9f 4f       	sbci	r25, 0xFF	; 255
 7e2:	08 95       	ret

000007e4 <__floatunsisf>:
 7e4:	e8 94       	clt
 7e6:	09 c0       	rjmp	.+18     	; 0x7fa <__floatsisf+0x12>

000007e8 <__floatsisf>:
 7e8:	97 fb       	bst	r25, 7
 7ea:	3e f4       	brtc	.+14     	; 0x7fa <__floatsisf+0x12>
 7ec:	90 95       	com	r25
 7ee:	80 95       	com	r24
 7f0:	70 95       	com	r23
 7f2:	61 95       	neg	r22
 7f4:	7f 4f       	sbci	r23, 0xFF	; 255
 7f6:	8f 4f       	sbci	r24, 0xFF	; 255
 7f8:	9f 4f       	sbci	r25, 0xFF	; 255
 7fa:	99 23       	and	r25, r25
 7fc:	a9 f0       	breq	.+42     	; 0x828 <__floatsisf+0x40>
 7fe:	f9 2f       	mov	r31, r25
 800:	96 e9       	ldi	r25, 0x96	; 150
 802:	bb 27       	eor	r27, r27
 804:	93 95       	inc	r25
 806:	f6 95       	lsr	r31
 808:	87 95       	ror	r24
 80a:	77 95       	ror	r23
 80c:	67 95       	ror	r22
 80e:	b7 95       	ror	r27
 810:	f1 11       	cpse	r31, r1
 812:	f8 cf       	rjmp	.-16     	; 0x804 <__floatsisf+0x1c>
 814:	fa f4       	brpl	.+62     	; 0x854 <__floatsisf+0x6c>
 816:	bb 0f       	add	r27, r27
 818:	11 f4       	brne	.+4      	; 0x81e <__floatsisf+0x36>
 81a:	60 ff       	sbrs	r22, 0
 81c:	1b c0       	rjmp	.+54     	; 0x854 <__floatsisf+0x6c>
 81e:	6f 5f       	subi	r22, 0xFF	; 255
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	8f 4f       	sbci	r24, 0xFF	; 255
 824:	9f 4f       	sbci	r25, 0xFF	; 255
 826:	16 c0       	rjmp	.+44     	; 0x854 <__floatsisf+0x6c>
 828:	88 23       	and	r24, r24
 82a:	11 f0       	breq	.+4      	; 0x830 <__floatsisf+0x48>
 82c:	96 e9       	ldi	r25, 0x96	; 150
 82e:	11 c0       	rjmp	.+34     	; 0x852 <__floatsisf+0x6a>
 830:	77 23       	and	r23, r23
 832:	21 f0       	breq	.+8      	; 0x83c <__floatsisf+0x54>
 834:	9e e8       	ldi	r25, 0x8E	; 142
 836:	87 2f       	mov	r24, r23
 838:	76 2f       	mov	r23, r22
 83a:	05 c0       	rjmp	.+10     	; 0x846 <__floatsisf+0x5e>
 83c:	66 23       	and	r22, r22
 83e:	71 f0       	breq	.+28     	; 0x85c <__floatsisf+0x74>
 840:	96 e8       	ldi	r25, 0x86	; 134
 842:	86 2f       	mov	r24, r22
 844:	70 e0       	ldi	r23, 0x00	; 0
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	2a f0       	brmi	.+10     	; 0x854 <__floatsisf+0x6c>
 84a:	9a 95       	dec	r25
 84c:	66 0f       	add	r22, r22
 84e:	77 1f       	adc	r23, r23
 850:	88 1f       	adc	r24, r24
 852:	da f7       	brpl	.-10     	; 0x84a <__floatsisf+0x62>
 854:	88 0f       	add	r24, r24
 856:	96 95       	lsr	r25
 858:	87 95       	ror	r24
 85a:	97 f9       	bld	r25, 7
 85c:	08 95       	ret

0000085e <__fp_cmp>:
 85e:	99 0f       	add	r25, r25
 860:	00 08       	sbc	r0, r0
 862:	55 0f       	add	r21, r21
 864:	aa 0b       	sbc	r26, r26
 866:	e0 e8       	ldi	r30, 0x80	; 128
 868:	fe ef       	ldi	r31, 0xFE	; 254
 86a:	16 16       	cp	r1, r22
 86c:	17 06       	cpc	r1, r23
 86e:	e8 07       	cpc	r30, r24
 870:	f9 07       	cpc	r31, r25
 872:	c0 f0       	brcs	.+48     	; 0x8a4 <__stack+0x45>
 874:	12 16       	cp	r1, r18
 876:	13 06       	cpc	r1, r19
 878:	e4 07       	cpc	r30, r20
 87a:	f5 07       	cpc	r31, r21
 87c:	98 f0       	brcs	.+38     	; 0x8a4 <__stack+0x45>
 87e:	62 1b       	sub	r22, r18
 880:	73 0b       	sbc	r23, r19
 882:	84 0b       	sbc	r24, r20
 884:	95 0b       	sbc	r25, r21
 886:	39 f4       	brne	.+14     	; 0x896 <__stack+0x37>
 888:	0a 26       	eor	r0, r26
 88a:	61 f0       	breq	.+24     	; 0x8a4 <__stack+0x45>
 88c:	23 2b       	or	r18, r19
 88e:	24 2b       	or	r18, r20
 890:	25 2b       	or	r18, r21
 892:	21 f4       	brne	.+8      	; 0x89c <__stack+0x3d>
 894:	08 95       	ret
 896:	0a 26       	eor	r0, r26
 898:	09 f4       	brne	.+2      	; 0x89c <__stack+0x3d>
 89a:	a1 40       	sbci	r26, 0x01	; 1
 89c:	a6 95       	lsr	r26
 89e:	8f ef       	ldi	r24, 0xFF	; 255
 8a0:	81 1d       	adc	r24, r1
 8a2:	81 1d       	adc	r24, r1
 8a4:	08 95       	ret

000008a6 <__fp_inf>:
 8a6:	97 f9       	bld	r25, 7
 8a8:	9f 67       	ori	r25, 0x7F	; 127
 8aa:	80 e8       	ldi	r24, 0x80	; 128
 8ac:	70 e0       	ldi	r23, 0x00	; 0
 8ae:	60 e0       	ldi	r22, 0x00	; 0
 8b0:	08 95       	ret

000008b2 <__fp_nan>:
 8b2:	9f ef       	ldi	r25, 0xFF	; 255
 8b4:	80 ec       	ldi	r24, 0xC0	; 192
 8b6:	08 95       	ret

000008b8 <__fp_pscA>:
 8b8:	00 24       	eor	r0, r0
 8ba:	0a 94       	dec	r0
 8bc:	16 16       	cp	r1, r22
 8be:	17 06       	cpc	r1, r23
 8c0:	18 06       	cpc	r1, r24
 8c2:	09 06       	cpc	r0, r25
 8c4:	08 95       	ret

000008c6 <__fp_pscB>:
 8c6:	00 24       	eor	r0, r0
 8c8:	0a 94       	dec	r0
 8ca:	12 16       	cp	r1, r18
 8cc:	13 06       	cpc	r1, r19
 8ce:	14 06       	cpc	r1, r20
 8d0:	05 06       	cpc	r0, r21
 8d2:	08 95       	ret

000008d4 <__fp_round>:
 8d4:	09 2e       	mov	r0, r25
 8d6:	03 94       	inc	r0
 8d8:	00 0c       	add	r0, r0
 8da:	11 f4       	brne	.+4      	; 0x8e0 <__fp_round+0xc>
 8dc:	88 23       	and	r24, r24
 8de:	52 f0       	brmi	.+20     	; 0x8f4 <__fp_round+0x20>
 8e0:	bb 0f       	add	r27, r27
 8e2:	40 f4       	brcc	.+16     	; 0x8f4 <__fp_round+0x20>
 8e4:	bf 2b       	or	r27, r31
 8e6:	11 f4       	brne	.+4      	; 0x8ec <__fp_round+0x18>
 8e8:	60 ff       	sbrs	r22, 0
 8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <__fp_round+0x20>
 8ec:	6f 5f       	subi	r22, 0xFF	; 255
 8ee:	7f 4f       	sbci	r23, 0xFF	; 255
 8f0:	8f 4f       	sbci	r24, 0xFF	; 255
 8f2:	9f 4f       	sbci	r25, 0xFF	; 255
 8f4:	08 95       	ret

000008f6 <__fp_split3>:
 8f6:	57 fd       	sbrc	r21, 7
 8f8:	90 58       	subi	r25, 0x80	; 128
 8fa:	44 0f       	add	r20, r20
 8fc:	55 1f       	adc	r21, r21
 8fe:	59 f0       	breq	.+22     	; 0x916 <__fp_splitA+0x10>
 900:	5f 3f       	cpi	r21, 0xFF	; 255
 902:	71 f0       	breq	.+28     	; 0x920 <__fp_splitA+0x1a>
 904:	47 95       	ror	r20

00000906 <__fp_splitA>:
 906:	88 0f       	add	r24, r24
 908:	97 fb       	bst	r25, 7
 90a:	99 1f       	adc	r25, r25
 90c:	61 f0       	breq	.+24     	; 0x926 <__fp_splitA+0x20>
 90e:	9f 3f       	cpi	r25, 0xFF	; 255
 910:	79 f0       	breq	.+30     	; 0x930 <__fp_splitA+0x2a>
 912:	87 95       	ror	r24
 914:	08 95       	ret
 916:	12 16       	cp	r1, r18
 918:	13 06       	cpc	r1, r19
 91a:	14 06       	cpc	r1, r20
 91c:	55 1f       	adc	r21, r21
 91e:	f2 cf       	rjmp	.-28     	; 0x904 <__fp_split3+0xe>
 920:	46 95       	lsr	r20
 922:	f1 df       	rcall	.-30     	; 0x906 <__fp_splitA>
 924:	08 c0       	rjmp	.+16     	; 0x936 <__fp_splitA+0x30>
 926:	16 16       	cp	r1, r22
 928:	17 06       	cpc	r1, r23
 92a:	18 06       	cpc	r1, r24
 92c:	99 1f       	adc	r25, r25
 92e:	f1 cf       	rjmp	.-30     	; 0x912 <__fp_splitA+0xc>
 930:	86 95       	lsr	r24
 932:	71 05       	cpc	r23, r1
 934:	61 05       	cpc	r22, r1
 936:	08 94       	sec
 938:	08 95       	ret

0000093a <__fp_zero>:
 93a:	e8 94       	clt

0000093c <__fp_szero>:
 93c:	bb 27       	eor	r27, r27
 93e:	66 27       	eor	r22, r22
 940:	77 27       	eor	r23, r23
 942:	cb 01       	movw	r24, r22
 944:	97 f9       	bld	r25, 7
 946:	08 95       	ret

00000948 <_exit>:
 948:	f8 94       	cli

0000094a <__stop_program>:
 94a:	ff cf       	rjmp	.-2      	; 0x94a <__stop_program>
